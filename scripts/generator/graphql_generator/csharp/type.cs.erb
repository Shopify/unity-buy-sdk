<% isRoot = schema.root_name?(type.name) %>
<% isQueryRoot = type.name == schema.query_root_name %>
<% if type.kind == 'INPUT_OBJECT' || type.kind == 'ENUM' %>
namespace Shopify.Unity {
<% else %>
namespace Shopify.Unity.GraphQL {
<% end %>
    using System;
    using System.Text;
    using System.Collections.Generic;
    using Shopify.Unity.SDK;

    <% case type.kind when 'OBJECT', 'INTERFACE', 'UNION' %>
        <%# the following will define a delegate for lamdas. Each delegate name will be followed by Delegate. eg. ShopDelegate %>
        public delegate void <%= type.classify_name %>Delegate(<%= type.classify_name %>Query query);

        <%# the following will start defining the class. Each type name will be followed by Query. eg. ShopQuery %>
        <%= docs_query_object(type) %>
        public class <%= type.classify_name %>Query {
            private StringBuilder Query;

            <%# create the constuctor %>
            <% if isRoot %>
                /// <summary>
                /// <see cref="<%= type.classify_name %>Query" /> constructor accepts no parameters but it will create a root
                /// <%= isQueryRoot ? "query" : "mutation" %> builder.
                /// </summary>
                public <%= type.classify_name %>Query() {
                    Query = new StringBuilder("<%= "mutation" unless isQueryRoot %>{");
                }
            <% else %>
                /// <summary>
                /// <see cref="<%= type.classify_name %>Query" /> is used to build queries. Typically
                /// <see cref="<%= type.classify_name %>Query" /> will not be used directly but instead will be used when building queries from either
                /// <see cref="<%= schema.query_root_name %>Query" /> or <see cref="<%= schema.mutation_root_name %>Query" />.
                /// </summary>
                public <%= type.classify_name %>Query(StringBuilder query) {
                    Query = query;

                    <% unless type.object? %>
                        Query.Append("__typename ");
                    <% end %>
                }
            <% end %>

            <%# now create methods to add fields to queries %>
            <% type.fields(include_deprecated: true).each do |field| %>
                <%= docs_query_field(field) %>
                public <%= type.classify_name %>Query <%= escape_reserved_word(field.name) %>(<%= field_args(field) %>) {
                    <% if field.deprecated? %>
                    Log.DeprecatedQueryField("<%= type.name %>", "<%= field.name %>", "<%= field.deprecation_reason.gsub(/\n/, "\\n") %>");
                    <% end %>

                    <%# now we we want to handle generating arguments %>
                    <% if field.args.any? %>
                        if (alias != null) {
                            ValidationUtils.ValidateAlias(alias);

                            Query.Append("<%= field.name + ALIAS_SEPARATOR %>");
                            Query.Append(alias);
                            Query.Append(":");
                        }

                        Query.Append("<%= field.name %> ");

                        Arguments args = new Arguments();

                        <%# handle adding required args to the args generator %>
                        <% field.required_args.each do |arg| %>
                            args.Add("<%= arg.name %>", <%= escape_reserved_word(arg.name) %>);
                        <% end %>

                        <% field.optional_args.each do |arg| %>
                            if (<%= escape_reserved_word(arg.name) %> != null) {
                                args.Add("<%= arg.name %>", <%= escape_reserved_word(arg.name) %>);
                            }
                        <% end %>

                        Query.Append(args.ToString());
                    <% else %>
                        Query.Append("<%= field.name %> ");
                    <% end %>


                    <%# if this field is an OBJECT we want to be able to query subfields %>
                    <% if field.type.subfields? %>
                        Query.Append("{");
                        buildQuery(new <%= field.type.unwrap.classify_name %>Query(Query));
                        Query.Append("}");
                    <% end %>

                    return this;
                }
            <% end %>

            <% unless type.object? %>
                <% type.possible_types.each do |possible_type| %>
                    /// <summary>
                    /// will allow you to write queries on <%= possible_type.classify_name %>.
                    /// </summary>
                    public <%= type.classify_name %>Query on<%= possible_type.classify_name %>(<%= possible_type.classify_name %>Delegate buildQuery) {
                        Query.Append("...on <%= possible_type.classify_name %>{");
                        buildQuery(new <%= possible_type.classify_name %>Query(Query));
                        Query.Append("}");
                        return this;
                    }
                <% end %>
            <% end %>

            <%# if this is the root we want to add in a ToString method %>
            <% if isRoot %>
                /// <summary>
                /// Will return a GraphQL query.
                /// </summary>
                public override string ToString() {
                    return Query.ToString() + "}";
                }
            <% end %>
        }
    <% when 'INPUT_OBJECT' %>
        <%= docs_input_object(type) %>
        public class <%= type.classify_name %> : InputBase {

            <% type.input_fields.each do |field| %>
            public const string <%= field.name %>FieldKey = "<%= field.name %>";
            <% end %>

            <% type.input_fields.each do |field| %>
                <%= docs_input_field(field) %>
                public <%= graph_type_to_csharp_type(field.type) %> <%= field.name %> {
                    get {
                        return <%= graph_type_to_csharp_cast(field.type, "Get(#{field.name}FieldKey)") %>;
                    }
                    set {
                        Set(<%= field.name %>FieldKey, value);
                    }
                }
            <% end %>

            <%= params_doc(type.input_fields) %>
            public <%= type.classify_name %>(<%= input_args(type) %>) {
                <%# handle adding required fields %>
                <% type.required_input_fields.each do |field| %>
                    Set(<%= field.name %>FieldKey, <%= escape_reserved_word(field.name) %>);
                <% end %>

                <%# handle adding optional fields %>
                <% type.optional_input_fields.each do |field| %>
                    if (<%= escape_reserved_word(field.name) %> != null) {
                        Set(<%= field.name %>FieldKey, <%= escape_reserved_word(field.name) %>);
                    }
                <% end %>
            }

            <%= params_doc(type.input_fields) %>
            public <%= type.classify_name %>(Dictionary<string, object> dataJSON) {
                <%# handle adding required fields %>
                <% if type.required_input_fields.length > 0 %>
                try {
                    <% type.required_input_fields.each do |field| %>
                        Set(<%= field.name %>FieldKey, dataJSON[<%= field.name %>FieldKey]);
                    <% end %>
                } catch {
                    throw;
                }
                <% end %>

                <%# handle adding optional fields %>
                <% type.optional_input_fields.each do |field| %>
                    if (dataJSON.ContainsKey(<%= field.name %>FieldKey)) {
                        Set(<%= field.name %>FieldKey, dataJSON[<%= field.name %>FieldKey]);
                    }
                <% end %>
            }
        }
    <% when 'ENUM' %>
        <%= docs_enum(type) %>
        public enum <%= type.classify_name %> {
            <%= enum_values(type) %>
        }
    <% end %>
}
