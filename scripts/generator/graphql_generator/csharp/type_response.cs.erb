namespace <%= namespace %> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Text.RegularExpressions;

    <% if type.object? %>
        public class <%= type.classify_name %> : AbstractResponse, ICloneable<%= ", IEnumerable" if connection? type %><%= type.interfaces.map{|interface| ", #{interface.classify_name}" }.join %> {

        <% if connection?(type) %>
            /* Creates ability to cast <%= type.classify_name %> to List<<%= node_type_from_connection_type(type).classify_name %>> */
            public static explicit operator List<<%= node_type_from_connection_type(type).classify_name %>>(<%= type.classify_name %> connection) {
                if (connection.Nodes == null) {
                    connection.Nodes = new List<<%= node_type_from_connection_type(type).classify_name %>>();

                    foreach(<%= edges_type_from_connection_type(type).classify_name %> edge in connection.edges()) {
                        connection.Nodes.Add(edge.node());
                    }
                }

                return connection.Nodes;
            }
        <% end %>
    <% elsif type.interface? %>
         public interface <%= type.classify_name %> {
            <% type.fields.each do |field| %>
                <%= graph_type_to_csharp_type(field.type) %> <%= field.name %>();
            <% end %>
        }

        public class Unknown<%= type.classify_name %> : AbstractResponse, ICloneable, <%= type.classify_name %> {

            public static <%= type.classify_name %> Create(Dictionary<string, object> dataJSON) {
                string typeName = (string) dataJSON["__typename"];

                switch(typeName) {
                    <% type.possible_types.each do |possible_type| %>
                        case "<%= possible_type.name %>":
                            return new <%= possible_type.classify_name %>(dataJSON);
                    <% end %>

                    default:
                        return new Unknown<%= type.classify_name %>(dataJSON);
                }
            }
    <% end %>
        <%# Constructor %>
        public <%= "Unknown" if type.interface? %><%= type.classify_name %>(Dictionary<string, object> dataJSON) {
            DataJSON = dataJSON;
            Data = new Dictionary<string,object>();
        
            foreach (string key in dataJSON.Keys) {
                string fieldName = key;
                Regex regexAlias = new Regex("^(.+)<%= ALIAS_SEPARATOR %>.+$");
                Match match = regexAlias.Match(key);

                if (match.Success) {
                    fieldName = match.Groups[1].Value;
                }

                switch(fieldName) {
                    <% type.fields.each do |field| %>
                    case "<%= field.name %>":
                        <% if field.type.kind == "NON_NULL" %>
                            Data.Add(
                                key,
                                <% case field.type.unwrap_non_null.kind
                                when "OBJECT" %>
                                    <%= response_init_object(field) %>
                                <% when "INTERFACE" %>
                                    <%= response_init_interface(field) %>
                                <% when "LIST" %>
                                    <%= response_init_list(field) %>
                                <% when "ENUM" %>
                                    <%= response_init_enum(field) %>
                                <% when "SCALAR" %>
                                    <%= response_init_scalar(field) %>
                                <% else %>
                                    <% raise NotImplementedError, "Unhandled #{type.kind} init for type" %>
                                <% end %>
                            );
                        <% else %>
                            if (dataJSON[key] == null) {
                                Data.Add(key, null);
                            } else {
                                Data.Add(
                                    key,
                                    <% case field.type.unwrap_non_null.kind
                                    when "OBJECT" %>
                                        <%= response_init_object(field) %>
                                    <% when "INTERFACE" %>
                                        <%= response_init_interface(field) %>
                                    <% when "LIST" %>
                                        <%= response_init_list(field) %>
                                    <% when "ENUM" %>
                                        <%= response_init_enum(field) %>
                                    <% when "SCALAR" %>
                                        <%= response_init_scalar(field) %>
                                    <% else %>
                                        <% raise NotImplementedError, "Unhandled #{type.kind} init for type" %>
                                    <% end %>
                                );
                            }
                        <% end %>
                    break;
                    <% end %>
                }
            }
        }

        <% if connection?(type) %>
            protected List<<%= node_type_from_connection_type(type).classify_name %>> Nodes;

            public IEnumerator GetEnumerator() {
                return (IEnumerator) this;
            }
        <% end %>

        <%# output getters for fields %>
        <% type.fields.each do |field| %>
            public <%= graph_type_to_csharp_type(field.type) %> <%= escape_reserved_word(field.name) %>(<%= 'string alias = null' if field.args.any? %>) {
                <% if field.args.any? %>
                    return Get<<%= graph_type_to_csharp_type(field.type) %>>("<%= field.name %>", alias);
                <% else %>
                    return Get<<%= graph_type_to_csharp_type(field.type) %>>("<%= field.name %>");
                <% end %>
            }
        <% end %>

        public object Clone() {
            return new <%= "Unknown" if type.interface? %><%= type.classify_name %>(DataJSON);
        }

        <% if connection?(type) %>
        public void AddFromConnection(<%= type.classify_name %> connection) {
            connection.Nodes = null;

            List<<%= field_from_type(type,"edges").type.unwrap.name %>> clonedList = new List<<%= field_from_type(type,"edges").type.unwrap.name %>>();

            foreach(<%= field_from_type(type,"edges").type.unwrap.name %> edge in connection.edges()) {
                clonedList.Add((<%= field_from_type(type,"edges").type.unwrap.name %>) edge.Clone());
            }

            if (Data.ContainsKey("edges")) {
                edges().AddRange(clonedList);
                Data["pageInfo"] = connection.pageInfo().Clone();
            } else {
                Data["edges"] = clonedList;
                Data["pageInfo"] = connection.pageInfo().Clone();
            }
        }
        <% end %>
    }
}
