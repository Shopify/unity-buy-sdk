namespace <%= namespace %> {
    using System;
    using System.Collections.Generic;

    public class TopLevelResponse : AbstractResponse {
        private const string KEY_DATA = "data";
        private const string KEY_ERRORS = "errors";

        public List<Exception> ResponseErrors;

        public TopLevelResponse(Dictionary<string,object> dataJSON) {
            object errors;
            object data;

            dataJSON.TryGetValue(KEY_ERRORS, out errors);
            dataJSON.TryGetValue(KEY_DATA, out data);

            if (errors != null) {
                ParseErrors((Dictionary<string,object>) dataJSON);
            } else if (data != null) {
                DataJSON = (Dictionary<string,object>) data;
            } else {
                throw new Exception(String.Format("Response JSON did not contain {0} or {1}", KEY_DATA, KEY_ERRORS));
            }
        }

        public List<Exception> Errors() {
            return ResponseErrors;
        }

        private void ParseErrors(Dictionary<string,object> dataJSON) {
            ResponseErrors = new List<Exception>();

            // there are cases where the returned errors are not an Array but are a string
            // instead. This conditional handle this.
            if (dataJSON[KEY_ERRORS] is string) {
                ResponseErrors.Add(new Exception((string) dataJSON[KEY_ERRORS]));
            } else {
                List<object> errorsJSON = (List<object>) dataJSON[KEY_ERRORS];

                foreach(Dictionary<string,object> error in errorsJSON) {
                    ResponseErrors.Add(new Exception((string) error["message"]));
                }
            }
        }
    }
}
