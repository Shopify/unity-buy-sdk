namespace <%= namespace %>.SDK {
    using System;
    using System.Collections.Generic;
    using <%= namespace %>;
    using <%= namespace %>.MiniJSON;

    public delegate void QueryResponseDelegate(QueryResponse response);
    public delegate void MutationResponseDelegate(MutationResponse response);

    public class QueryLoader {
        ILoader Loader;

        public QueryLoader(ILoader loader) {
            Loader = loader;
        }

        public void Query(<%= schema.query_root_name %>Delegate addTo, QueryResponseDelegate callback) {
            <%= schema.query_root_name %>Query query = new <%= schema.query_root_name %>Query();

            addTo(query);

            Query(query, callback);
        }
        
        public void Query(<%= schema.query_root_name %>Query query, QueryResponseDelegate callback) {
            Loader.Load(query.ToString(), (string response, string error) => {
                if (error != null) {
                    callback(new QueryResponse(error));
                } else {
                    Dictionary<string,object> jsonResponse = (Dictionary<string,object>) Json.Deserialize(response);

                    callback(new QueryResponse(jsonResponse));
                }
            });
        }

        public void Mutation(<%= schema.mutation_root_name %>Delegate addTo, MutationResponseDelegate callback) {
            <%= schema.mutation_root_name %>Query query = new <%= schema.mutation_root_name %>Query();

            addTo(query);

            Mutation(query, callback);
        }

        public void Mutation(<%= schema.mutation_root_name %>Query query, MutationResponseDelegate callback) {
            Loader.Load(query.ToString(), (string response, string error) => {
                if (error != null) {
                    callback(new MutationResponse(error));
                } else {
                    Dictionary<string,object> jsonResponse = (Dictionary<string,object>) Json.Deserialize(response);

                    callback(new MutationResponse(jsonResponse));
                }
            });
        }
    }
}
