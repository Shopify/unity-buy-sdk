namespace <%= namespace %>.SDK {
    using System;
    using System.Collections.Generic;
    using <%= namespace %>;
    using <%= namespace %>.GraphQL;
    using <%= namespace %>.MiniJSON;

    /// <summary>
    /// Abstracts creating and sending queries and mutations via an ILoader.
    /// </summary>
    public class QueryLoader {
        ILoader Loader;

        /// <summary>
        /// Accepts the <see ref="ILoader">ILoader </see>, which will do network communcation to send GraphQL queries.
        /// </summary>
        /// <param name="loader">will perform network communication to send GraphQL queries to a GraphQL endpoint</param>
        public QueryLoader(ILoader loader) {
            Loader = loader;
        }

        /// <summary>
        /// Generates GraphQL queries.
        /// </summary>
        /// <param name="buildQuery">Delegate to build query</param>
        /// <param name="callback">callback that receives the query response</param>
        public void Query(<%= schema.query_root_name %>Delegate buildQuery, QueryResponseHandler callback) {
            <%= schema.query_root_name %>Query query = new <%= schema.query_root_name %>Query();

            buildQuery(query);

            Query(query, callback);
        }

        /// <summary>
        /// Sends GraphQL queries to the GraphQL endpoint.
        /// </summary>
        /// <param name="query">query to be sent to the GraphQL endpoint</param>
        /// <param name="callback">callback that receives the query response</param>
        public void Query(<%= schema.query_root_name %>Query query, QueryResponseHandler callback) {

            #if SHOPIFY_VERBOSE_DEBUG
            Console.WriteLine("Sending Query: " + query.ToString() + "\n");
            #endif

            Loader.Load(query.ToString(), (string response, string error) => {
                #if SHOPIFY_VERBOSE_DEBUG
                Console.WriteLine("Response: " + response + "\n");
                Console.WriteLine("Error: " + error + "\n");
                #endif
                if (error != null) {
                    callback(new QueryResponse(error));
                } else {
                    callback(new QueryResponse(GetJSON(response)));
                }
            });
        }

        /// <summary>
        /// Generates GraphQL mutations.
        /// </summary>
        /// <param name="buildQuery">Delegate to build a mutation query</param>
        /// <param name="callback">callback that receives the mutation response</param>
        public void Mutation(<%= schema.mutation_root_name %>Delegate buildQuery, MutationResponseHandler callback) {
            <%= schema.mutation_root_name %>Query query = new <%= schema.mutation_root_name %>Query();

            buildQuery(query);

            Mutation(query, callback);
        }

        /// <summary>
        /// Sends GraphQL mutations to a GraphQL endpoint.
        /// </summary>
        /// <param name="query">mutation to be sent to GraphQL endpoint</param>
        /// <param name="callback">callback that receives the mutation response</param>
        public void Mutation(<%= schema.mutation_root_name %>Query query, MutationResponseHandler callback) {

            #if SHOPIFY_VERBOSE_DEBUG
            Console.WriteLine("Sending Mutation: " + query.ToString() + "\n");
            #endif

            Loader.Load(query.ToString(), (string response, string error) => {
                #if SHOPIFY_VERBOSE_DEBUG
                Console.WriteLine("Response: " + response + "\n");
                Console.WriteLine("Error: " + error + "\n");
                #endif

                if (error != null) {
                    callback(new MutationResponse(error));
                } else {
                    callback(new MutationResponse(GetJSON(response)));
                }
            });
        }

        private Dictionary<string, object> GetJSON(string response) {
            Dictionary<string, object> json = (Dictionary<string, object>) Json.Deserialize(response);

            if (json == null) {
                throw new InvalidServerResponseException("Server did not return valid JSON data");
            }

            return json;
        }
    }
}
