namespace <%= namespace %>.SDK {
    using System;
    using System.Collections.Generic;
    using <%= namespace %>;
    using <%= namespace %>.MiniJSON;

    public delegate void QueryResponseHandler(QueryResponse response);
    public delegate void MutationResponseHandler(MutationResponse response);

    public class QueryLoader {
        ILoader Loader;

        public QueryLoader(ILoader loader) {
            Loader = loader;
        }

        public void Query(<%= schema.query_root_name %>Delegate buildQuery, QueryResponseHandler callback) {
            <%= schema.query_root_name %>Query query = new <%= schema.query_root_name %>Query();

            buildQuery(query);

            Query(query, callback);
        }
        
        public void Query(<%= schema.query_root_name %>Query query, QueryResponseHandler callback) {
            Loader.Load(query.ToString(), (string response, string error) => {
                if (error != null) {
                    callback(new QueryResponse(error));
                } else {
                    callback(new QueryResponse(GetJSON(response)));
                }
            });
        }

        public void Mutation(<%= schema.mutation_root_name %>Delegate buildQuery, MutationResponseHandler callback) {
            <%= schema.mutation_root_name %>Query query = new <%= schema.mutation_root_name %>Query();

            buildQuery(query);

            Mutation(query, callback);
        }

        public void Mutation(<%= schema.mutation_root_name %>Query query, MutationResponseHandler callback) {
            Loader.Load(query.ToString(), (string response, string error) => {
                if (error != null) {
                    callback(new MutationResponse(error));
                } else {
                    callback(new MutationResponse(GetJSON(response)));
                }
            });
        }

        private Dictionary<string, object> GetJSON(string response) {
            Dictionary<string, object> json = (Dictionary<string, object>) Json.Deserialize(response);

            if (json == null) {
                throw new InvalidServerResponseException("Server did not return valid JSON data");
            }

            return json;
        }
    }
}
