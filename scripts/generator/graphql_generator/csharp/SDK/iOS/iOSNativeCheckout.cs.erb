#if UNITY_IOS
namespace <%= namespace %>.SDK.iOS {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using <%= namespace %>.SDK;
    using <%= namespace %>.MiniJSON;

    partial class iOSNativeCheckout : INativeCheckout {
        [DllImport ("__Internal")]
        private static extern bool _CanCheckoutWithApplePay();

        [DllImport ("__Internal")]
        private static extern bool _CanShowApplePaySetup();

        [DllImport ("__Internal")]
        private static extern void _ShowApplePaySetup();

        [DllImport ("__Internal")]
        private static extern bool _CreateApplePaySession(string merchantID, string countryCode, string currencyCode, string unityDelegateObjectName, string serializedSummaryItems, string serializedShippingMethods, bool requiringShipping);

        [DllImport ("__Internal")]
        private static extern void _PresentApplePayAuthorization();

        private Cart CurrentCart;
        private ApplePayEventReceiverBridge ApplePayReceiver;

        private CheckoutSuccessCallback OnSuccess;
        private CheckoutCancelCallback OnCancelled;
        private CheckoutFailureCallback OnFailure;

        public iOSNativeCheckout(Cart cart) {
            CurrentCart = cart;
        }

        /// <summary>
        /// Checks if the device is capable of paying with Apple Pay
        /// </summary>
        /// <returns>True if the device is capable of paying with Apple Pay</returns>
        public bool CanCheckout() {
            return _CanCheckoutWithApplePay();
        }

        /// <summary>
        /// Checks if the device is capable of setting up Apple Pay
        /// </summary>
        /// <returns>True if the device is capable of setting up Apple Pay </returns>
        public bool CanShowPaymentSetup() {
            return _CanShowApplePaySetup();
        }

        /// <summary>
        /// Launches the iOS Wallet App, for the user to sign up with Apple Pay
        /// </summary>
        public void ShowPaymentSetup() {
            _ShowApplePaySetup();
        }

        /// <summary>
        /// Starts the process of making a payment through Apple Pay.
        /// </summary>
        /// <remarks>
        ///  Displays a payment interface to the user based on the contents of the Cart
        /// </remarks>
        /// <param name="key">Merchant ID for Apple Pay from the Apple Developer Portal</param>
        /// <param name="success">Delegate method that will be notified upon a successful payment</param>
        /// <param name="failure">Delegate method that will be notified upon a failure during the checkout process</param>
        /// <param name="cancelled">Delegate method that will be notified upon a cancellation during the checkout process</param>
        public void Checkout(string key, CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {

            OnSuccess = success;
            OnCancelled = cancelled;
            OnFailure = failure;

            var summaryItems = GetSummaryItems();
            var summaryString = Json.Serialize(summaryItems);
            var currencyCodeString = CurrentCart.GetCurrencyCode().ToString("G");

            if (ApplePayReceiver == null) {
                ApplePayReceiver = GlobalGameObject.AddComponent<ApplePayEventReceiverBridge>();
                ApplePayReceiver.Receiver = this;
            }

            _CreateApplePaySession(key, "CA", CurrentCart.GetCurrencyCode().ToString("G"), GlobalGameObject.Name, summaryString, null, CurrentCart.GetRequiresShipping());
        }

        private List<SummaryItem> GetSummaryItems() {
            var summaryItems = new List<SummaryItem>();
            summaryItems.Add(new SummaryItem("SUBTOTAL", CurrentCart.GetSubtotal().ToString()));

            if (CurrentCart.GetRequiresShipping()) {
                try {
                    summaryItems.Add(new SummaryItem("SHIPPING", CurrentCart.GetShippingTotal().ToString()));
                } catch {}
            }

            summaryItems.Add(new SummaryItem("TAXES", CurrentCart.GetTotalTax().ToString()));
            summaryItems.Add(new SummaryItem("TOTAL", CurrentCart.GetTotal().ToString()));

            return summaryItems;
        }

        private List<ShippingMethod> GetShippingMethods() {
            var shippingMethods = new List<ShippingMethod>();

            try {
                var availableShippingRates = CurrentCart.GetShippingRates();

                foreach (var shippingRate in availableShippingRates) {
                    shippingMethods.Add(new ShippingMethod(shippingRate.title(), shippingRate.price().ToString(), shippingRate.handle()));
                }
            } catch (Exception e) {
                throw new Exception("Attempted to access AvailableShippingRates when CurrentCheckout has no property named AvailableShippingRates", e);
            }

            return shippingMethods;
        }
    }
}
#endif
