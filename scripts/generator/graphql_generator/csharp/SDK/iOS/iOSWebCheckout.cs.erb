#if UNITY_IOS
namespace <%= namespace %>.SDK.iOS {
    using UnityEngine;
    using System.Runtime.InteropServices;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    class iOSWebCheckout: IWebCheckout {
        private static iOSWebViewMessageReceiver _messageReceiver;

        private ShopifyClient Client;
        private Cart Cart;

        public iOSWebCheckout(Cart cart, ShopifyClient client) {
            Client = client;
            Cart = cart;
        }

        [DllImport ("__Internal")]
        private static extern void _CheckoutWithWebView(string unityDelegateObjectName, string checkoutURL);

        public void Checkout(string checkoutURL, CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            SetupNativeMessageReceiver(success, cancelled, failure);
            _CheckoutWithWebView(GlobalGameObject.Name, checkoutURL);
        }

        private void SetupNativeMessageReceiver(CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            if (_messageReceiver == null) {
                _messageReceiver = GlobalGameObject.AddComponent<iOSWebViewMessageReceiver>();
            }
        
            _messageReceiver.Client = Client;
            _messageReceiver.CurrentCheckout = Cart.CurrentCheckout;

            _messageReceiver.OnSuccess = success;
            _messageReceiver.OnCancelled = cancelled;
            _messageReceiver.OnFailure = failure;
        }
    }

    class iOSWebViewMessageReceiver: MonoBehaviour {
        internal ShopifyClient Client;
        internal Checkout CurrentCheckout;

        internal CheckoutSuccessCallback OnSuccess;
        internal CheckoutCancelCallback OnCancelled;
        internal CheckoutFailureCallback OnFailure;

        void OnNativeMessage(string jsonMessage) {
            var message = NativeMessage.CreateFromJSON(jsonMessage);
            if (message.Content == "loadedThankYouPage") {
                // Do a round trip to the server to see if the purchase is solid.
                // Invoke callbacks on cart to pass to Unity
                DidCheckoutCompleteSuccessfully(CurrentCheckout.id(), (didSucceed) => {
                    if (didSucceed) {
                        OnSuccess();
                        return;
                    } 

                    var error = new ShopifyError(
                        ShopifyError.ErrorType.NativePaymentProcessingError, 
                        "User navigated to end of checkout without successfully checking out."
                    );

                    OnFailure(error);
                });
            } else if (message.Content == "cancelled") {
                OnCancelled();
                message.Respond("");
            }
        }

        private delegate void VerifyCheckoutComplete(bool didSucceed);
        private void DidCheckoutCompleteSuccessfully(string checkoutId, VerifyCheckoutComplete callback) {
            var query = new QueryRootQuery();
            query.node(
                buildQuery: n => n
                    .onCheckout(c => c.completedAt()),
                id: CurrentCheckout.id()
            );
            
            Client.Query(query, (response, error) => {
                if (error != null) {
                    callback(false);
                } else {
                    var checkout = (Checkout) response.node();
                    callback(checkout.completedAt() != null);
                } 
            });
        }
    }
}
#endif
