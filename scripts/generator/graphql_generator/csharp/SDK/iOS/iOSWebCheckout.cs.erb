#if UNITY_IOS
namespace <%= namespace %>.SDK.iOS {
    using UnityEngine;
    using System.Runtime.InteropServices;
    using <%= namespace %>.SDK;

    class iOSWebCheckout: IWebCheckout {
        private static iOSWebViewMessageReceiver _messageReceiver;

        [DllImport ("__Internal")]
        private static extern void _CheckoutWithWebView(string unityDelegateObjectName, string checkoutURL);

        public void Checkout(string checkoutURL, CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            SetupNativeMessageReceiver(success, cancelled, failure);
            _CheckoutWithWebView(GlobalGameObject.Name, checkoutURL);
        }

        private static void SetupNativeMessageReceiver(CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            if (_messageReceiver == null) {
                _messageReceiver = GlobalGameObject.AddComponent<iOSWebViewMessageReceiver>();
            }
        
            _messageReceiver.OnSuccess = success;
            _messageReceiver.OnCancelled = cancelled;
            _messageReceiver.OnFailure = failure;
        }
    }

    class iOSWebViewMessageReceiver: MonoBehaviour {
        internal CheckoutSuccessCallback OnSuccess;
        internal CheckoutCancelCallback OnCancelled;
        internal CheckoutFailureCallback OnFailure;

        void OnNativeMessage(string jsonMessage) {
            var message = NativeMessage.CreateFromJSON(jsonMessage);
            if (message.Content == "loadedThankYouPage") {
                // Do a round trip to the server to see if the purchase is solid.
                // Invoke callbacks on cart to pass to Unity
                OnSuccess();
            } else if (message.Content == "cancelled") {
                OnCancelled();
                message.Respond("");
            }
        }
    }
}
#endif
