#if UNITY_IOS
namespace <%= namespace %>.SDK.iOS {
    using UnityEngine;
    using System.Runtime.InteropServices;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    class iOSWebCheckout: IWebCheckout {
        private static iOSWebViewMessageReceiver _messageReceiver;

        private ShopifyClient Client;
        private Cart Cart;

        public iOSWebCheckout(Cart cart, ShopifyClient client) {
            Client = client;
            Cart = cart;
        }

        [DllImport ("__Internal")]
        private static extern void _CheckoutWithWebView(string unityDelegateObjectName, string checkoutURL);

        public void Checkout(string checkoutURL, CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            SetupNativeMessageReceiver(success, cancelled, failure);
            _CheckoutWithWebView(GlobalGameObject.Name, checkoutURL);
        }

        private void SetupNativeMessageReceiver(CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            if (_messageReceiver == null) {
                _messageReceiver = GlobalGameObject.AddComponent<iOSWebViewMessageReceiver>();
            }
        
            _messageReceiver.Client = Client;
            _messageReceiver.CurrentCheckout = Cart.CurrentCheckout;

            _messageReceiver.OnSuccess = success;
            _messageReceiver.OnCancelled = cancelled;
            _messageReceiver.OnFailure = failure;
        }
    }

    public class iOSWebViewMessageReceiver: MonoBehaviour {
        public ShopifyClient Client;
        public Checkout CurrentCheckout;

        public CheckoutSuccessCallback OnSuccess;
        public CheckoutCancelCallback OnCancelled;
        public CheckoutFailureCallback OnFailure;

        public void OnNativeMessage(string jsonMessage) {
            var message = NativeMessage.CreateFromJSON(jsonMessage);
            if (message.Content == "dismissed") {
                var query = new QueryRootQuery();
                query.node(
                    buildQuery: n => n
                        .onCheckout(c => c.completedAt()),
                    id: CurrentCheckout.id()
                );
                
                Client.Query(query, (response, error) => {
                    if (error != null) {
                        OnFailure(error);
                    } else {
                        var checkout = (Checkout) response.node();
                        if (checkout.completedAt() != null) {
                            OnSuccess();
                        } else {
                            OnCancelled();
                        }
                    } 
                });
            }
        }
    }
}
#endif
