#if UNITY_IPHONE
namespace <%= namespace %>.SDK.iOS {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using <%= namespace %>.SDK;
    using <%= namespace %>.MiniJSON;

    public partial class iOSNativeCheckout : IApplePayEventReceiver {

        private enum NativePaymentStatus {
            Success, Cancelled, Failed
        }

        public void UpdateSummaryItemsForShippingIdentifier(string serializedMessage) {
            var message = NativeMessage.CreateFromJSON(serializedMessage);

            CurrentCart.SetShippingLine(message.Content, (ShopifyError error) => {
                if (error == null) {
                    var summaryItems = GetSummaryItems();
                    message.Respond(new ApplePayEventResponse(ApplePayAuthorizationStatus.Success, summaryItems).ToJsonString());
                } else {
                    message.Respond(new ApplePayEventResponse(ApplePayAuthorizationStatus.Failure).ToJsonString());
                }
            });
        }

        public void UpdateSummaryItemsForShippingContact(string serializedMessage) {
            var message = NativeMessage.CreateFromJSON(serializedMessage);
            var contentDictionary = (Dictionary<string, object>)Json.Deserialize(message.Content);
            var mailingAddressInput = new MailingAddressInput(contentDictionary);

            Action respondWithSuccess = () => {
                message.Respond(new ApplePayEventResponse(ApplePayAuthorizationStatus.Success, GetSummaryItems(), GetShippingMethods()).ToJsonString());
            };

            Action<ShopifyError> respondToError = (ShopifyError error) => {
                ApplePayEventResponse response;

                switch(error.Type) {
                case ShopifyError.ErrorType.UserError:
                    var userErrors = CurrentCart.UserErrors;

                    if (userErrors.Count > 0) {
                        ApplePayAuthorizationStatus statusToReturn = ApplePayAuthorizationStatus.Failure;
                        foreach (var userError in userErrors) {
                            statusToReturn = AuthorizationStatusForPreliminaryShippingUserError(userError);

                            if (statusToReturn == ApplePayAuthorizationStatus.Failure) {
                                break;
                            }
                        }
                        response = new ApplePayEventResponse(statusToReturn, GetSummaryItems());
                    } else {
                        response = new ApplePayEventResponse(ApplePayAuthorizationStatus.Failure);
                    }
                    break;
                default:
                    response = new ApplePayEventResponse(ApplePayAuthorizationStatus.Failure);
                    break;
                }

                message.Respond(response.ToJsonString());
            };

            CurrentCart.SetShippingAddress(mailingAddressInput, (ShopifyError error) => {
                if (error == null) {
                    respondWithSuccess();
                } else {
                    respondToError(error);
                }
            });
        }

        public void FetchApplePayCheckoutStatusForToken(string serializedMessage) {
            //TODO
        }

        public void DidFinishCheckoutSession(string serializedMessage) {
            var message = NativeMessage.CreateFromJSON(serializedMessage);
            var paymentStatus = (NativePaymentStatus) Enum.Parse(typeof(NativePaymentStatus), (string) message.Content);
            switch (paymentStatus) {
            case NativePaymentStatus.Success:
                OnSuccess();
                return;
            case NativePaymentStatus.Cancelled:
                OnCancelled();
                return;
            case NativePaymentStatus.Failed:
                var error = new ShopifyError(ShopifyError.ErrorType.NativePaymentProcessingError, "Unable to retrieve a payment from the user's payment provider. Fallback to web checkout.");
                OnFailure(error);
                return;
            }
        }

        // We only receive a partial shipping address before the user has authenticated
        // City, State, Zip, Country
        // So we will receive user errors from our GraphQL query, even though it was a success
        private ApplePayAuthorizationStatus AuthorizationStatusForPreliminaryShippingUserError(UserError error) {
            var fields = error.field();
            var lastIndex = fields.Count - 1;

            if (lastIndex >= 0) {
                var lastField = fields[lastIndex];
                if (lastField.Equals("city") ||
                    lastField.Equals("country") ||
                    lastField.Equals("province") ||
                    lastField.Equals("zip")) {
                        return ApplePayAuthorizationStatus.InvalidShippingPostalAddress;
                }
            }

            return ApplePayAuthorizationStatus.Failure;
        }
    }
}
#endif
