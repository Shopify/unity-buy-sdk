namespace <%= namespace %>.SDK {
    using System.Collections.Generic;
    using <%= namespace %>.GraphQL;

    public class ProductsQueries {
        public void ShopProducts(QueryRootQuery query, Dictionary<string,int> imageResolutions, int first = 250, string after = null) {
            query.shop(s => s
                .products(pc => pc
                    .edges(e => e
                        .node((p) => { p
                            .id()
                            .title()
                            .descriptionHtml()
                            .options(pn => pn
                                .name()
                                .values()
                            )
                            .variants(
                                pvc => ProductVariantConnection(pvc, imageResolutions),
                                first: DefaultQueries.MaxPageSize
                            )
                            .collections(
                                pcc => CollectionConnection(pcc),
                                first: DefaultQueries.MaxPageSize
                            )
                            .images(
                                ic => ImageConnection(ic),
                                first: DefaultQueries.MaxPageSize
                            );

                            foreach(string alias in imageResolutions.Keys) {
                                p.images(
                                    ic => ImageConnection(ic),
                                    first: DefaultQueries.MaxPageSize,
                                    maxWidth: imageResolutions[alias],
                                    maxHeight: imageResolutions[alias],
                                    alias: alias
                                );
                            }
                        })
                        .cursor()
                    )
                    .pageInfo(pi => pi
                        .hasNextPage()
                    ),
                    first: first, after: after
                )
            );
        }

        public void ImageConnection(ImageConnectionQuery imageConnection) {
            imageConnection
            .edges(ie => ie
                .node(imn => Image(imn))
                .cursor()
            )
            .pageInfo(pi => pi
                .hasNextPage()
            );
        }

        public void ProductVariantConnection(ProductVariantConnectionQuery variantConnection, Dictionary<string,int> imageResolutions) {
            variantConnection
            .edges(pve => pve
                .node(pnv => ProductVariant(pnv, imageResolutions))
                .cursor()
            )
            .pageInfo(pvp => pvp
                .hasNextPage()
            );
        }

        public void CollectionConnection(CollectionConnectionQuery collectionConnection) {
            collectionConnection
            .edges(pce => pce
                .node(pnc => Collection(pnc))
                .cursor()
            )
            .pageInfo(pcp => pcp
                .hasNextPage()
            );
        }

        public void Image(ImageQuery image) {
            image
            .altText()
            .src();
        }

        public void ProductVariant(ProductVariantQuery variant, Dictionary<string,int> imageResolutions) {
            variant
            .id()
            .available()
            .image(pnvi => pnvi
                .altText()
                .src()
            )
            .price()
            .title()
            .weight()
            .selectedOptions(pnvso => pnvso
                .name()
                .value()
            )
            .weightUnit();

            foreach(string alias in imageResolutions.Keys) {
                variant.image(
                    pnvi => pnvi
                    .altText()
                    .src(),
                    maxWidth: imageResolutions[alias], maxHeight: imageResolutions[alias], alias: alias
                );
            }
        }

        public void Collection(CollectionQuery collection) {
            collection
            .id()
            .title()
            .updatedAt();
        }
    }

    public class CollectionsQueries {
        public void ShopCollections(QueryRootQuery query, Dictionary<string, int> imageResolutions, int first = 250, string after = null) {
            query.shop(s => s
                .collections(cc => cc
                    .edges(e => e
                        .node(c => Collection(c, imageResolutions))
                        .cursor()
                    )
                    .pageInfo(pi => pi
                        .hasNextPage()
                    ),
                    first: first, after: after
                )
            );
        }

        public void Collection(CollectionQuery collection, Dictionary<string, int> imageResolutions) {
            collection
            .id()
            .image(pci => pci
                .altText()
                .src()
            )
            .title()
            .updatedAt()
            .products(pc => ProductConnection(pc),
                first: DefaultQueries.MaxPageSize
            );

            
            foreach(string alias in imageResolutions.Keys) {
                collection
                .image(pci => pci
                    .altText()
                    .src(),
                    maxWidth: imageResolutions[alias], 
                    maxHeight: imageResolutions[alias],
                    alias: alias
                );
            }
        }

        public void ProductConnection(ProductConnectionQuery productConnection) {
            productConnection
            .edges(e => e
                .node(p => Product(p))
                .cursor()
            )
            .pageInfo(pi => pi
                .hasNextPage()
            );
        }

        public void Product(ProductQuery product) {
            product
            .id();
        }
    }

    public class DefaultQueries {
        public static readonly int MaxPageSize = 250;

        public static ProductsQueries products = new ProductsQueries();
        public static CollectionsQueries collections = new CollectionsQueries();
    }
}
