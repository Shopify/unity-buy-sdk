namespace <%= namespace %>.SDK {
    using System;
    using System.Collections;
    using System.Collections.Generic;

    public class ResponseMergeUtil {
        public delegate void MergeFieldDelegate(string field, IDictionary into, IDictionary responseA, IDictionary responseB);

        public static void MergeOverwrite(string field, IDictionary into, IDictionary responseA, IDictionary responseB) {
            into[field] = responseB[field];
        }

        private Dictionary<string, MergeFieldDelegate> FieldMergers = new Dictionary<string, MergeFieldDelegate>();
        private Dictionary<string, ResponseMergeUtil> ObjectMergers = new Dictionary<string, ResponseMergeUtil>();

        public void AddFieldMerger(string field, MergeFieldDelegate merger) {
            FieldMergers[field] = merger;
        }

        public void AddObjectMerger(string field, ResponseMergeUtil merger) {
            ObjectMergers[field] = merger;
        }

        public Dictionary<string, object> Merge(IDictionary responseA, IDictionary responseB) {
            Dictionary<string, object> MergedResponse = new Dictionary<string, object>();

            foreach(string field in responseA.Keys) {
                MergedResponse[field] = responseA[field];
            }

            foreach(string field in responseB.Keys) {
                if (FieldMergers.ContainsKey(field)) {

                } else if (ObjectMergers.ContainsKey(field)) {
                    MergedResponse[field] = ObjectMergers[field].Merge(
                        (IDictionary) responseA[field], 
                        (IDictionary) responseB[field]
                    );
                } else {
                    MergeOverwrite(field, MergedResponse, responseA, responseB);
                }
            }

            return MergedResponse;
        }
    }
}
