#if UNITY_ANDROID
namespace <%= namespace %>.SDK.Android {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using <%= namespace %>.SDK;
    using <%= namespace %>.MiniJSON;

    #if !SHOPIFY_MONO_UNIT_TEST
    using UnityEngine;
    #endif

    public partial class AndroidNativeCheckout : IAndroidPayEventReceiver {

        private delegate void AndroidPayEventHandlerCompletion(AndroidPayCheckoutResponse.Status status);

        public void OnUpdateShippingAddress(string serializedMessage) {
            var message = NativeMessage.CreateFromJSON(serializedMessage);
            var contentDictionary = (Dictionary<string, object>) Json.Deserialize(message.Content);
            var mailingAddressInput = new MailingAddressInput(contentDictionary);
            CartState.SetShippingAddress(mailingAddressInput, (ShopifyError error) => {
                if (error == null) {
                    RespondToUpdateAddressSuccessForMessage(message);
                } else {
                    RespondError(message, error);
                    OnFailure(error);
                }
            });
        }

        public void OnUpdateShippingLine(string serializedMessage) {
            var message = NativeMessage.CreateFromJSON(serializedMessage);
            var contentDictionary = (Dictionary<string, object>) Json.Deserialize(message.Content);
            var shippingMethod = ShippingMethod.CreateFromJson(contentDictionary);
            UpdateShippingLine(shippingMethod, message);
        }

        public void OnConfirmCheckout(string serializedMessage) {
            var checkout = CartState.CurrentCheckout;
            var message = NativeMessage.CreateFromJSON(serializedMessage);
            var amount  = checkout.totalPrice();
            var payment = new NativePayment(message.Content);
            var tokenizedPaymentInput = new TokenizedPaymentInput(
                amount: amount,
                billingAddress: payment.BillingAddress,
                idempotencyKey: payment.TransactionIdentifier,
                paymentData: payment.PaymentData,
                identifier: payment.Identifier,
                type: "android_pay"
            );
            CartState.SetEmailAddress(payment.Email, (ShopifyError error) => {
                if (error == null) {
                    PerformCheckout(checkout, tokenizedPaymentInput, message);
                } else {
                    RespondError(message, error);
                    OnFailure(error);
                }
            });
        }

        private void PerformCheckout(Checkout checkout, TokenizedPaymentInput tokenizedPaymentInput,
                NativeMessage message) {
            CartState.CheckoutWithTokenizedPayment(tokenizedPaymentInput, (ShopifyError error) => {
                if (error == null) {
                    AndroidPayCheckoutResponse.Status status = AndroidPayCheckoutResponse.Status.Success;
                    message.Respond(new AndroidPayCheckoutResponse(status).ToJsonString());
                    OnSuccess();
                } else {
                    AndroidPayCheckoutResponse.Status status = AndroidPayCheckoutResponse.Status.Failure;
                    message.Respond(new AndroidPayCheckoutResponse(status).ToJsonString());
                    OnFailure(error);
                }
            });
        }

        public void OnError(string serializedMessage) {
            OnFailure(new ShopifyError(
                    ShopifyError.ErrorType.NativePaymentProcessingError,
                    serializedMessage
                ));
        }

        public void OnCancel(string serializedMessage) {
            OnCancelled();
        }

        private void RespondToUpdateAddressSuccessForMessage(NativeMessage message) {
            var shippingMethods = GetShippingMethods();
            if (shippingMethods.Count > 0) {
                // Set the first shipping method as the default
                UpdateShippingLine(shippingMethods[0], message);
            }
        }

        private void UpdateShippingLine(ShippingMethod shippingMethod, NativeMessage message) {
            CartState.SetShippingLine(shippingMethod.Identifier, (ShopifyError error) => {
                    if (error == null) {
                        message.Respond(GetAndroidPayEventResponse().ToJsonString());
                    } else {
                        RespondError(message, error);
                        OnFailure(error);
                    }
                });
        }

        private void RespondError(NativeMessage message, ShopifyError error) {
            message.Respond(error.ToJsonString());
        }
    }
}
#endif
