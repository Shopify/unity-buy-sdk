#if UNITY_ANDROID
namespace <%= namespace %>.SDK.Android {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using <%= namespace %>.SDK;
    using <%= namespace %>.MiniJSON;

    #if !SHOPIFY_MONO_UNIT_TEST
    using UnityEngine;
    #endif

    public partial class AndroidNativeCheckout : INativeCheckout {
        private CartState CartState;
        private String MerchantName;
        private String CountryCodeString;
        private AndroidPayEventReceiverBridge AndroidPayEventBridge;

        private CheckoutSuccessCallback OnSuccess;
        private CheckoutCancelCallback OnCancelled;
        private CheckoutFailureCallback OnFailure;

        public AndroidNativeCheckout(CartState cartState) {
            CartState = cartState;
        }

        public bool CanShowPaymentSetup(PaymentSettings paymentSettings) {
            return false;
        }

        public void ShowPaymentSetup() {
            // TODO
        }

        public bool CanCheckout(PaymentSettings paymentSettings) {
            // TODO: Invoke methods in the plugin to determine if we can perform Android Pay
            return true;
        }

        public void Checkout(
            string key, 
            ShopMetadata shopMetadata,
            CheckoutSuccessCallback success, 
            CheckoutCancelCallback cancelled, 
            CheckoutFailureCallback failure
        ) {
            // TODO: Store callbacks and extract items we need from the cart to pass to Android Pay.
            OnSuccess = success;
            OnCancelled = cancelled;
            OnFailure = failure;

            var checkout = CartState.CurrentCheckout;

            MerchantName = shopMetadata.Name; // TODO: Replace with Shop name
            var pricingLineItems = GetPricingLineItemsFromCheckout(checkout);
            var pricingLineItemsString = pricingLineItems.ToJsonString();
            var currencyCodeString = checkout.currencyCode().ToString("G");
            CountryCodeString = shopMetadata.PaymentSettings.countryCode().ToString("G");
            var requiresShipping = checkout.requiresShipping();

            #if !SHOPIFY_MONO_UNIT_TEST
            const bool testing = true; // TODO parametrize for 3rd-party devs
            using (var androidPayCheckoutSession = new AndroidJavaObject("com.shopify.unity.buy.androidpay.AndroidPayCheckoutSession", testing)) {
                object[] args = {
                     GlobalGameObject.Name,
                     MerchantName,
                     key,
                     pricingLineItemsString,
                     currencyCodeString,
                     CountryCodeString,
                     requiresShipping
                };
                if (androidPayCheckoutSession.Call<bool>("checkoutWithAndroidPay", args)) {
                    if (AndroidPayEventBridge == null) {
                        AndroidPayEventBridge = GlobalGameObject.AddComponent<AndroidPayEventReceiverBridge>();
                        AndroidPayEventBridge.Receiver = this;
                    }
                } else {
                    // TODO: Create more meaningful error?
                    var error = new ShopifyError(ShopifyError.ErrorType.NativePaymentProcessingError, "Unable to create Android Pay session.");
                    OnFailure(error);
                }
            }
            #endif
        }

        /// <summary>
        /// Creates an <see cref="AndroidPayEventResponse"/> object based on the <see cref="CartState"/>
        /// data.
        /// </summary>
        private AndroidPayEventResponse GetAndroidPayEventResponse() {
            var checkout = CartState.CurrentCheckout;
            var pricingLineItems = GetPricingLineItemsFromCheckout(checkout);
            var currencyCodeString = checkout.currencyCode().ToString("G");
            var requiresShipping = checkout.requiresShipping();
            var shippingMethods = GetShippingMethods();
            return new AndroidPayEventResponse(MerchantName, pricingLineItems, currencyCodeString,
                    CountryCodeString, requiresShipping, shippingMethods);
        }

        /// <summary>
        /// Creates a <see cref="PricingLineItems"/> object based on the <see cref="Checkout"/>
        /// data.
        /// </summary>
        /// <param name="checkout">
        /// A <code>Checkout</code> object to build the <code>PricingLineItems</code> on.
        /// </param>
        private PricingLineItems GetPricingLineItemsFromCheckout(Checkout checkout) {
            var taxPrice = checkout.totalTax();
            var subtotal = checkout.subtotalPrice();
            var totalPrice = checkout.totalPrice();
            var shippingPrice = (decimal?) null;
            if (checkout.requiresShipping()) {
                try {
                    shippingPrice = checkout.shippingLine().price();
                } catch {}
            }
            return new PricingLineItems(taxPrice, subtotal, totalPrice, shippingPrice);
        }

        /// <summary>
        /// Creates a list of <see cref="ShippingMethod"/> objects based on the for the
        /// current shipping address set to the <see cref="Checkout"/> object.
        /// </summary>
        private List<ShippingMethod> GetShippingMethods() {
            var checkout = CartState.CurrentCheckout;
            var shippingMethods = new List<ShippingMethod>();

            try {
                var availableShippingRates = checkout.availableShippingRates().shippingRates();

                foreach (var shippingRate in availableShippingRates) {
                    shippingMethods.Add(new ShippingMethod(shippingRate.title(), shippingRate.price().ToString(), shippingRate.handle()));
                }
            } catch (Exception e) {
                throw new Exception("Attempted to gather information on available shipping rates on CurrentCheckout, but CurrentCheckout do not have those properties queried", e);
            }

            return shippingMethods;
        }
    }
}
#endif
