namespace <%= namespace %>.SDK {
    using System;
    using System.Text;
    using System.Collections.Generic;

    public class ShopifyBuy {
        public static ShopifyClient Client() {
            return DefaultClient;
        }

        public static ShopifyClient Client(string domain) {
            if (ClientByDomain.ContainsKey(domain)) {
                return ClientByDomain[domain];
            } else {
                return null;
            }
        }

        public static ShopifyClient Init(string apiKey, string domain) {
            ClientByDomain[domain] = new ShopifyClient(apiKey, domain);

            if (DefaultClient == null) {
                DefaultClient = ClientByDomain[domain];
            }

            return ClientByDomain[domain];
        }

        public static ShopifyClient Init(ILoader loader, string domain = null) {
            if (domain != null) {
                ClientByDomain[domain] = new ShopifyClient(loader);

                if (DefaultClient == null) {
                    DefaultClient = ClientByDomain[domain];
                }

                return ClientByDomain[domain];
            } else {
                DefaultClient = new ShopifyClient(loader);

                return DefaultClient;
            }
        }

        private static ShopifyClient DefaultClient;
        private static Dictionary<string, ShopifyClient> ClientByDomain = new Dictionary<string, ShopifyClient>();
    }

    public delegate void ResponseProductsHandler(List<Product> products);

    public class ShopifyClient {
        QueryLoader Loader;

        public ShopifyClient(string apiKey, string domain) {
            #if UNITY_EDITOR
            Loader = new QueryLoader(new UnitLoader(domain, Base64(apiKey)));
            #endif
        }

        public ShopifyClient(ILoader loader) {
            Loader = new QueryLoader(loader);
        }

        public void products(ResponseProductsHandler callback, int first = 250) {
            GetProductsList((products) => {
                GetConnectionsForProducts(products, callback);
            }, first);
        }

        private List<bool> GetProductsToQueryImages(List<Product> products) {
            List<bool> imagesToQuery = new List<bool>();

            for(int i = 0; i < products.Count; i++) {
                imagesToQuery.Add(products[i].images().pageInfo().hasNextPage());
            }

            return imagesToQuery;
        }

        private void GetConnectionsForProducts(List<Product> products, ResponseProductsHandler callback) {
            List<bool> rootImagesToQuery = GetProductsToQueryImages(products);
            List<bool> imagesToQuery = rootImagesToQuery;

            if (imagesToQuery.Contains(true)) {
                ConnectionLoader loader = new ConnectionLoader(Loader);

                loader.Query(
                    (response) => {
                        QueryRootQuery query = null;

                        if (response != null) {
                            imagesToQuery = GetProductsToQueryImages(products);
                        }

                        for (int i = 0; i < imagesToQuery.Count; i++) {
                            bool shouldQuery = imagesToQuery[i];
                            List<ImageEdge> imageEdges;

                            if (shouldQuery && response != null) {
                                try {
                                    shouldQuery = ((Product) response.data.node(String.Format("product{0}", i))).images().pageInfo().hasNextPage();
                                } catch(NoQueryException error) {
                                    // we may have not needed to query anymore for products
                                    shouldQuery = false;
                                }   
                            }

                            if (shouldQuery) {
                                if (response == null) {
                                    imageEdges = products[i].images().edges();
                                } else {
                                    imageEdges = ((Product) response.data.node(String.Format("product{0}", i))).images().edges();
                                }
                                
                                if (query == null) {
                                    query = new QueryRootQuery();
                                }

                                query.node(n => n
                                    .onProduct(p => p
                                        .images(ic => ic
                                            .edges(ie => ie
                                                .node(imn => imn
                                                    .altText()
                                                    .src()
                                                )
                                                .cursor()
                                            )
                                            .pageInfo(pi => pi
                                                .hasNextPage()
                                            ),
                                            first: 250, after: imageEdges[imageEdges.Count - 1].cursor()
                                        )
                                    ),
                                    id: products[i].id(), alias: String.Format("product{0}", i)
                                );
                            }
                        }

                        return query;
                    },
                    (responses) => {
                        QueryResponse firstResponse = responses[0];
                        Product firstProduct;
                        Product productToMerge;

                        foreach(QueryResponse response in responses) {
                            if (response != firstResponse) {
                                for (int i = 0; i < rootImagesToQuery.Count; i++) {
                                    try {
                                        firstProduct = (Product) firstResponse.data.node(String.Format("product{0}", i));
                                        productToMerge = (Product) response.data.node(String.Format("product{0}", i));
                                        firstProduct.images().AddFromConnection(productToMerge.images());
                                    } catch(NoQueryException error) {}
                                }
                            }
                        }

                        return firstResponse;
                    },
                    (response) => {
                        for (int i = 0; i < rootImagesToQuery.Count; i++) {
                            if (rootImagesToQuery[i]) {
                                Product productToMerge = (Product) response.data.node(String.Format("product{0}", i));
                                products[i].images().AddFromConnection(productToMerge.images());
                            }
                        }

                        callback(products);
                    }
                );
            } else {
                callback(products);
            }
        }

        private void GetProductsList(ResponseProductsHandler callback, int first = 250) {
            ConnectionLoader loader = new ConnectionLoader(Loader);

            loader.Query(
                (response) => {
                    QueryRootQuery query = null;

                    if (response == null || response.data.shop().products().pageInfo().hasNextPage()) {
                        query = new QueryRootQuery();
                        List<ProductEdge> edges = response != null ? response.data.shop().products().edges() : null;

                        query = new QueryRootQuery();
                        query.shop(s => s
                            .products(pc => pc
                                .edges(e => e
                                    .node(p => p
                                        .id()
                                        .title()
                                        .bodyHtml()
                                        .images(ic => ic
                                            .edges(ie => ie
                                                .node(imn => imn
                                                    .altText()
                                                    .src()
                                                )
                                                .cursor()
                                            )
                                            .pageInfo(pi => pi
                                                .hasNextPage()
                                            ),
                                            first: 250
                                        )
                                        .options(pn => pn
                                            .name()
                                            .values()
                                        )
                                        .variants(pvc => pvc
                                            .edges(pve => pve
                                                .node(pnv => pnv
                                                    .available()
                                                    .images(pnvi => pnvi
                                                        .altText()
                                                        .src()
                                                    )
                                                    .price()
                                                    .title()
                                                    .weight()
                                                    .weightUnit()
                                                )
                                                .cursor()
                                            )
                                            .pageInfo(pvp => pvp
                                                .hasNextPage()
                                            ),
                                            first: 250
                                        )
                                    )
                                    .cursor()
                                )
                                .pageInfo(pi => pi
                                    .hasNextPage()
                                ),
                                first: first, after: edges != null ? edges[edges.Count - 1].cursor() : null
                            )
                        );
                    }

                    return query;
                },
                (responses) => {
                    QueryResponse firstResponse = responses[0];

                    foreach(QueryResponse response in responses) {
                        if (response != firstResponse) {
                            firstResponse.data.shop().products().AddFromConnection(
                                response.data.shop().products()
                            );
                        }
                    }

                    return firstResponse;
                },
                (response) => {
                    callback((List<Product>) response.data.shop().products());
                }
            );
        }

        private string Base64(string apiKey) {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(apiKey));
        }
    }
}
