namespace <%= namespace %>.SDK {
    using System.Collections.Generic;

    public class ConnectionLoader {
        public delegate <%= schema.query_root_name %>Query RequestQueryHandler(QueryResponse response = null);
        public delegate QueryResponse ResponseMergeHandler(QueryResponse mergedResponse, QueryResponse newResponse);
        private delegate void QueryLoop(QueryLoop loop);

        private QueryLoader Loader;

        public ConnectionLoader(QueryLoader loader) {
            Loader = loader;
        }




        public delegate void CollectionQueryHandler(QueryRootQuery query, string after);
        public delegate void CollectionMergeHandler(QueryRoot baseQuery, QueryRoot queryToMerge);

        public struct ConnectionQueryInfo {
            public ConnectionQueryInfo(string connectionName, CollectionQueryHandler query, CollectionMergeHandler merge) {
                ConnectionName = connectionName;
                Query = query;
                Merge = merge;
            }

            public string ConnectionName;
            public CollectionQueryHandler Query;
            public CollectionMergeHandler Merge;
        }

        public void QueryConnections(params ConnectionQueryInfo[] connectionInfos) {
            
        }

        public void Query(RequestQueryHandler getQuery, ResponseMergeHandler doMerge, QueryResponseDelegate callback) {
            QueryResponse mergedResponse = null;
            <%= schema.query_root_name %>Query query = getQuery(null);

            QueryLoop queryLoop = (loop) => {
                Loader.Query(query, (response) => {
                    if (response.HTTPError != null) {
                        callback(response);
                    } else if(response.errors != null) {
                        callback(response);
                    } else {
                        if (mergedResponse == null) {
                            mergedResponse = response;
                        } else {
                            mergedResponse = doMerge(mergedResponse, response);
                        }
                        
                        query = getQuery(response);

                        if (query != null) {
                            loop(loop);
                        } else {
                            callback(mergedResponse);
                        }
                    }
                });
            };

            queryLoop(queryLoop);
        }
    }
}
