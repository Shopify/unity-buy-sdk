namespace <%= namespace %>.SDK {
    using System;
    using System.Text;
    using System.Reflection;
    using System.Collections;
    using System.Collections.Generic;

    public class ShopifyBuy {
        public static ShopifyClient Client() {
            return DefaultClient;
        }

        public static ShopifyClient Client(string domain) {
            if (ClientByDomain.ContainsKey(domain)) {
                return ClientByDomain[domain];
            } else {
                return null;
            }
        }

        public static ShopifyClient Init(string apiKey, string domain) {
            ClientByDomain[domain] = new ShopifyClient(apiKey, domain);

            if (DefaultClient == null) {
                DefaultClient = ClientByDomain[domain];
            }

            return ClientByDomain[domain];
        }

        public static ShopifyClient Init(ILoader loader, string domain = null) {
            if (domain != null) {
                ClientByDomain[domain] = new ShopifyClient(loader);

                if (DefaultClient == null) {
                    DefaultClient = ClientByDomain[domain];
                }

                return ClientByDomain[domain];
            } else {
                DefaultClient = new ShopifyClient(loader);

                return DefaultClient;
            }
        }

        private static ShopifyClient DefaultClient;
        private static Dictionary<string, ShopifyClient> ClientByDomain = new Dictionary<string, ShopifyClient>();
    }

    public delegate void ResponseProductsHandler(List<Product> products, List<string> errors, string httpError);
    delegate void QueryProductHandler(ProductQuery product, string after);
    delegate void QueryProductMergeHandler(Product product, Product productResult);

    public class ShopifyClient {
        QueryLoader Loader;

        public ShopifyClient(string apiKey, string domain) {
            #if UNITY_EDITOR
            Loader = new QueryLoader(new UnityLoader(domain, Base64(apiKey)));
            #endif
        }

        public ShopifyClient(ILoader loader) {
            Loader = new QueryLoader(loader);
        }

        public void products(ResponseProductsHandler callback, int? first = null, string after = null) {
            GetProductsList((products, errors, httpError) => {
                if (httpError != null) {
                    callback(null, null, httpError);
                } else if (errors != null) {
                    callback(null, errors, null);
                } else {
                    GetConnectionInfosForProducts(products, callback);
                }
            }, first: first, after: after);
        }

        private string GetAfter(ConnectionInfo info, object connection) {
            string after = null;
            
            MethodInfo pageInfoMethod = info.ConnectionType.GetMethod("pageInfo");
            PageInfo pageInfo = (PageInfo) pageInfoMethod.Invoke(connection, null);

            MethodInfo edgesMethod = info.ConnectionType.GetMethod("edges");
            MethodInfo cursorMethod = info.EdgeType.GetMethod("cursor");

            if (pageInfo.hasNextPage()) {
                IList edges = edgesMethod.Invoke(connection, null) as IList;
                after = (string) cursorMethod.Invoke(edges[edges.Count - 1], null);
            }
        
            return after;
        }

        private object GetConnectionForProduct(ConnectionInfo info, Product product) {
            MethodInfo methodConnection = product.GetType().GetMethod(info.Name);

            return methodConnection.Invoke(product, new object[] { null });
        }

        private struct ConnectionInfo {
            public ConnectionInfo(string name, Type connectionType, Type edgeType, QueryProductHandler query, QueryProductMergeHandler merge) {
                Name = name;
                ConnectionType = connectionType;
                EdgeType = edgeType;
                QueryHandler = query;
                QueryMergeHandler = merge;
            }

            public string Name;
            public Type ConnectionType;
            public Type EdgeType;
            public QueryProductHandler QueryHandler;
            public QueryProductMergeHandler QueryMergeHandler;
        }

        private void GetConnectionInfosForProducts(List<Product> products, ResponseProductsHandler callback) {
            List<ConnectionInfo> connectionInfos = new List<ConnectionInfo>() { 
                new ConnectionInfo(
                    name: "images", 
                    connectionType: typeof(ImageConnection), 
                    edgeType: typeof(ImageEdge), 
                    query: (p, after) => {
                        p.images(ic => DefaultQueries.ImageConnection(ic),
                            first: DefaultQueries.MaxPageSize, after: after
                        );
                    },
                    merge: (p, pr) => {
                        p.images().AddFromConnection(pr.images());
                    }
                ),
                new ConnectionInfo(
                    name: "variants", 
                    connectionType: typeof(ProductVariantConnection), 
                    edgeType: typeof(ProductVariantEdge), 
                    query: (p, after) => {
                        p.variants(vc => DefaultQueries.ProductVariantConnection(vc),
                            first: DefaultQueries.MaxPageSize, after: after
                        );
                    },
                    merge: (p, pr) => {
                        p.variants().AddFromConnection(pr.variants());
                    }
                )
            };

            List<int> productsQueried = new List<int>();
            List<List<ConnectionInfo>> connectionInfoQueried = new List<List<ConnectionInfo>>();
            QueryRootQuery query = new QueryRootQuery();

            for(int i = 0; i < products.Count; i++) {
                Product product = products[i];
                List<string> afters = new List<string>();
                List<ConnectionInfo> connectionInfoForProduct = new List<ConnectionInfo>();
                
                foreach(ConnectionInfo info in connectionInfos) {
                    object connection = GetConnectionForProduct(info, product);
                    string after = GetAfter(info, connection);

                    if (after != null) {
                        afters.Add(after);
                        connectionInfoForProduct.Add(info);
                    }
                }

                if (connectionInfoForProduct.Count > 0) {
                    productsQueried.Add(i);
                    connectionInfoQueried.Add(connectionInfoForProduct);

                    query.node(n => n
                        .onProduct((p) => {
                            p.id();

                            for(int j = 0; j < afters.Count; j++) {
                                string after = afters[j];
                                ConnectionInfo info = connectionInfoForProduct[j];
                                
                                info.QueryHandler(p, after);
                            }
                        }),
                        id: product.id(), alias: String.Format("product{0}", i)
                    );
                }
            }

            if (productsQueried.Count == 0) {
                callback(products, null, null);
            } else {
                Loader.Query(query, (response) => {
                    if (response.HTTPError != null) {
                        callback(null, null, response.HTTPError);
                    } else if (response.errors != null) {
                        callback(null, response.errors, null);
                    } else {
                        for(int i = 0; i < productsQueried.Count; i++) {
                            int idxQueried = productsQueried[i];
                            List<ConnectionInfo> infos = connectionInfoQueried[i];
                            Product product = products[idxQueried];
                            Product productResult = (Product) response.data.node(String.Format("product{0}", idxQueried));

                            foreach(ConnectionInfo info in infos) {
                                info.QueryMergeHandler(product, productResult);
                            }
                        }

                        GetConnectionInfosForProducts(products, callback);
                    }
                });
            }
        }

        private void GetProductsList(ResponseProductsHandler callback, int? first = null, string after = null) {
            ConnectionLoader loader = new ConnectionLoader(Loader);
            int countToLoad = first == null ? int.MaxValue : (int) first;

            loader.Query(
                (response) => {
                    QueryRootQuery query = null;

                    List<ProductEdge> edges = response != null ? response.data.shop().products().edges() : null;

                    if (edges != null) {
                        countToLoad -= edges.Count;
                    }

                    if (response == null || (countToLoad > 0 && response.data.shop().products().pageInfo().hasNextPage())) {
                        query = new QueryRootQuery();
                        
                        query = new QueryRootQuery();
                        DefaultQueries.ShopProducts(
                            query: query, 
                            first: countToLoad > DefaultQueries.MaxPageSize ? DefaultQueries.MaxPageSize : countToLoad, 
                            after: edges != null ? edges[edges.Count - 1].cursor() : after
                        );
                    }

                    return query;
                },
                (firstResponse, response) => {
                    firstResponse.data.shop().products().AddFromConnection(
                        response.data.shop().products()
                    );

                    return firstResponse;
                },
                (response) => {
                    if (response.HTTPError != null) {
                        callback(null, null, response.HTTPError);
                    } else if (response.errors != null) {
                        callback(null, response.errors, null);
                    } else {
                        callback((List<Product>) response.data.shop().products(), null, null);
                    }
                }
            );
        }

        private string Base64(string apiKey) {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(apiKey));
        }
    }
}
