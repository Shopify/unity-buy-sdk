#if !SHOPIFY_MONO_UNIT_TEST
namespace <%= namespace %>.SDK {
    using UnityEngine;
    using System;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using <%= namespace %>.MiniJSON;

    internal class LoaderComponent : MonoBehaviour {
        string URL;
        string Authorization;
        LoaderResponseHandler Callback;

        public LoaderComponent SetURL(string url) {
            URL = url;

            return this;
        }

        public LoaderComponent SetAuthorization(string authorization) {
            Authorization = authorization;

            return this;
        }

        public void Load(string query, LoaderResponseHandler callback) {
            Callback = callback;

            Dictionary<string,string> headers = new Dictionary<string,string>();
            headers["Content-Type"] = "application/graphql";
            headers["X-Shopify-Storefront-Access-Token"] = Authorization;
            headers["X-SDK-Version"] = ShopifyBuy.VERSION;
            headers["X-SDK-Variant"] = "unity";

            byte[] body = Encoding.ASCII.GetBytes(query);

            WWW w = new WWW(URL, body, headers);

            StartCoroutine(DoWWW(w));
        }

        private IEnumerator DoWWW(WWW w) {
            yield return w;

            if (!string.IsNullOrEmpty(w.error)) {
                Callback(null, w.error);
            } else {
                Callback(w.text, null);
            }

            w.Dispose();
            MonoBehaviour.Destroy(this);
        }
    }

    /// <summary>
    /// will perform network communication to send GraphQL queries between Unity and a Shopify GraphQL end point
    /// </summary>
    public class UnityLoader : ILoader {
        static GameObject LoaderGameObject;

        /// <summary>
        /// Shopify store domain where the GraphQL endpoint lives
        /// </summary>
        public string Domain {
            get {
                return _Domain;
            }
        }

        /// <summary>
        /// access token used to communicate with the Shopify Store GraphQL end point
        /// </summary>
        public string AccessToken {
            get {
                return _AccessToken;
            }
        }

        string _Domain;
        string _AccessToken;
        string Authorization;
        
        /// <param name="domain">Shopify store domain that you'd like to query on</param>
        /// <param name="accessToken">access token used to communicate with the Shopify Store</param>
        public UnityLoader(string domain, string accessToken) {
            _AccessToken = accessToken;
            _Domain = domain;

            Authorization = Base64(accessToken);
        }

        /// <summary>
        /// Send a query to the Storefront api
        /// </summary>
        /// <param name="query">Query that will be sent to the Storefront API</param>
        /// <param name="callback">callback that receives a response</param>
        public void Load(string query, LoaderResponseHandler callback) {
            if (LoaderGameObject == null) {
                LoaderGameObject = new GameObject();
            }

            LoaderGameObject.AddComponent<LoaderComponent>()
            .SetURL("https://" + Domain + "/api/graphql.json")
            .SetAuthorization(Authorization)
            .Load(query, callback);
        }

        private string Base64(string accessToken) {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(accessToken));
        }
    }
}
#endif
