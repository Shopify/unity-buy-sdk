namespace <%= namespace %> {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    #if UNITY_IOS
    using <%= namespace %>.SDK.iOS;
    #endif

    /// <summary>
    /// This exception is thrown when interacting with a cart to add, update, or delete line items and no matching
    /// variant could be found.
    /// </summary>
    public class NoMatchingVariantException : Exception {
        public NoMatchingVariantException(string message) : base(message) {}
    }

    /// <summary>
    /// Wraps around a shipping address and shipping identifier. Used for sending the final checkout fields in one GraphQL query.
    /// </summary>
    public struct ShippingFields {
        public MailingAddressInput ShippingAddress;
        public string ShippingIdentifier; 

        public ShippingFields(MailingAddressInput shippingAddress, string shippingIdentifier) {
            ShippingIdentifier = shippingIdentifier;
            ShippingAddress = shippingAddress;
        }
    }
    
    /// <summary>
    /// Manages line items for an order. Can also be used to generate a web checkout link to check out in browser.
    /// </summary>
    public class Cart {
        /// <summary>
        /// Current <see ref="CartLineItems">line items </see> for this <see ref="Cart">Cart </see>.
        /// </summary>
        public CartLineItems LineItems {
            get {
                return State.LineItems;
            }
        }

        public List<UserError> UserErrors {
            get {
                return State.UserErrors;
            }
        }

        private bool IsSaved {
            get {
                return IsCreated && LineItems.IsSaved;
            }
        }

        private bool IsCreated {
            get {
                return CurrentCheckout != null;
            }
        }

        public Checkout CurrentCheckout {
            get {
                return State.CurrentCheckout;
            }
        }

        private IWebCheckout WebCheckout;
        private INativeCheckout NativeCheckout;
        private PaymentSettings StorePaymentSettings;

        private ShopifyClient Client;

        #if (SHOPIFY_TEST)
        public CartState State;
        #else
        private CartState State;
        #endif

        /// <summary>
        /// Constructs a new cart using a <see ref="ShopifyClient">ShopifyClient </see>. Typically, carts won't be
        /// instantiated directly, but will rather be instatiated using <see ref="ShopifyClient.Cart">ShopifyBuy.Client().Cart() </see>.
        /// </summary>
        /// <param name="client">client associated with this cart</param>
        /// \code
        /// // Example that creates a cart using a ShopifyClient and checks how many line items it has
        /// // (spoiler: it has 0 line items since the cart was just created).
        /// ShopifyClient client = new ShopifyClient(accessToken, shopDomain);
        ///
        /// Cart cart = new Cart(client);
        ///
        /// Debug.Log(cart.LineItems.All().Count);
        /// \endcode
        public Cart(ShopifyClient client) {
            State = new CartState(client);
            Client = client;

            #if UNITY_IOS
            WebCheckout = new iOSWebCheckout(this, client);
            NativeCheckout = new iOSNativeCheckout(State);
            #endif
        }

        /// <summary>
        /// Resets the cart by removing all line items and resets all internal state.
        /// </summary>
        public void Reset() {
            State.Reset();
        }

        public void GetWebCheckoutLink(GetWebCheckoutLinkSuccessCallback success, GetWebCheckoutLinkFailureCallback failure) {
            State.CheckoutSave(error => {
                if (error != null) {
                    failure(error);
                    return;
                }

                success(CurrentCheckout.webUrl());
            });
        }

        /// <summary>
        /// Launches a platform-specific web view screen with the Cart's web checkout link loaded. This can be used to perform
        /// a cart checkout from within your application instead of being directed to an external web application. Typically this
        /// can be used as a fallback measure in cases where the user's device doesn't support native pay methods.
        /// </summary>
        /// <param name="success">called when the web checkout screen has been dismissed and the checkout was successful.</param>
        /// <param name="cancelled">called when the web checkout screen was dismissed before completing a checkout.</param>
        /// <param name="failure">called when an error was encountered after the web checkout screen has been dismissed.</param>
        public void CheckoutWithNativeWebView(CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            if (WebCheckout == null) {
                throw new PlatformNotSupportedException("This platform does not support checkout with web pay");
            }

            GetWebCheckoutLink(url => {
                WebCheckout.Checkout(url, success, cancelled, failure);
            }, error => {
                failure(error);
            });
        }

        public void CheckoutWithNativePay(string key, CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            if (NativeCheckout == null) {
                throw new PlatformNotSupportedException("This platform does not support checkout with native pay");
            }

            State.CheckoutSave(error => {
                if (error != null) {
                    failure(error);
                } else {
                    GetPaymentSettings((paymentSettings, paymentSettingsError) => {
                        if (paymentSettingsError != null) {
                            failure(paymentSettingsError);
                        } else {
                            NativeCheckout.Checkout(key, paymentSettings, success, cancelled, failure);
                        }
                    });
                }
            });
        }

        public bool CanShowNativePaySetup() {
            if (NativeCheckout != null) {
               return  NativeCheckout.CanShowPaymentSetup();
            } else {
                return false;
            }
        }

        public void ShowNativePaySetup() {
            if (NativeCheckout != null) {
                NativeCheckout.ShowPaymentSetup();
            } else {
                throw new PlatformNotSupportedException("This platform does not support showing a native payment setup");
            }
        }

        public void CanCheckoutWithNativePay(CanCheckoutWithNativePayCallback callback) {
            if (NativeCheckout != null) {
                GetPaymentSettings((paymentSettings, error) => {
                    if (error != null) {
                        callback(false);
                    } else {
                        callback(NativeCheckout.CanCheckout(paymentSettings));
                    }
                });
            } else {
                callback(false);
            }
        }

        private void GetPaymentSettings(PaymentSettingsHandler callback) {
            if (StorePaymentSettings != null) {
                callback(StorePaymentSettings, null);
            } else {
                Client.paymentSettings((paymentSettings, error) => {
                    if (error == null) {
                        StorePaymentSettings = paymentSettings;
                    }
                    callback(paymentSettings, error);
                });
            }
        }
    }
}
