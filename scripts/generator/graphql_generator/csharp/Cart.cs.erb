namespace <%= namespace %> {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    /// <summary>
    /// This exception is thrown when interacting with a cart to add, update, or delete line items and no matching
    /// variant could be found.
    /// </summary>
    public class NoMatchingVariantException : Exception {
        public NoMatchingVariantException(string message) : base(message) {}
    }

    /// <summary>
    /// Manages line items for an order. Can also be used to generate a web checkout link to check out in browser.
    /// </summary>
    public class Cart {
        /// <summary>
        /// Current <see ref="CartLineItems">line items </see> for this <see ref="Cart">Cart </see>.
        /// </summary>
        public CartLineItems LineItems {
            get {
                return _LineItems;
            }
        }

        private bool IsSaved {
            get {
                return IsCreated && _IsSaved;
            }
        }

        private bool IsCreated {
            get {
                return Checkout != null;
            }
        }

        private CartLineItems _LineItems;
        private bool _IsSaved;
        private ShopifyClient Client;
        private Checkout Checkout;

        /// <summary>
        /// Constructs a new cart using a <see ref="ShopifyClient">ShopifyClient </see>. Typically, carts won't be
        /// instantiated directly, but will rather be instatiated using <see ref="ShopifyClient.Cart">ShopifyBuy.Client().Cart() </see>.
        /// </summary>
        /// <param name="client">client associated with this cart</param>
        /// \code
        /// // Example that creates a cart using a ShopifyClient and checks how many line items it has
        /// // (spoiler: it has 0 line items since the cart was just created).
        /// ShopifyClient client = new ShopifyClient(accessToken, shopDomain);
        ///
        /// Cart cart = new Cart(client);
        ///
        /// Debug.Log(cart.LineItems.All().Count);
        /// \endcode
        public Cart(ShopifyClient client) {
            Client = client;
            _LineItems = new CartLineItems();
        }

        public void GetWebCheckoutLink(Action<string> success, Action<List<string>, string> failure, string note = null) {
            CheckoutSave((errors, httpError) => {
                if (errors == null && httpError == null) {

                } else {
                    failure(errors, httpError);
                }
            });
        }

        private void CheckoutSave(Action<List<string>, string> callback) {
            if (!IsCreated) {
                CheckoutCreate(callback);
            } else if(!IsSaved) {
                CheckoutUpdate(callback);
            } else {
                callback(null, null);
            }
        }

        private void CheckoutCreate(Action<List<string>, string> callback) {
            
        }

        private void CheckoutUpdate(Action<List<string>, string> callback) {

        }

        private void CheckoutPoll(Action<List<string>, string> callback) {

        }
    }
}
