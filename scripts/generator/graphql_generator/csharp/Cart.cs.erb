namespace <%= namespace %> {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    #if UNITY_IOS
    using <%= namespace %>.SDK.iOS;
    #endif

    /// <summary>
    /// This exception is thrown when interacting with a cart to add, update, or delete line items and no matching
    /// variant could be found.
    /// </summary>
    public class NoMatchingVariantException : Exception {
        public NoMatchingVariantException(string message) : base(message) {}
    }
    /// <summary>
    /// Manages line items for an order. Can also be used to generate a web checkout link to check out in browser.
    /// </summary>
    public partial class Cart {
        /// <summary>
        /// Current <see ref="CartLineItems">line items </see> for this <see ref="Cart">Cart </see>.
        /// </summary>
        public CartLineItems LineItems {
            get {
                return _LineItems;
            }
        }

        public List<UserError> UserErrors {
            get {
                return _UserErrors;
            }
        }

        private bool IsSaved {
            get {
                return IsCreated && LineItems.IsSaved;
            }
        }

        private bool IsCreated {
            get {
                return CurrentCheckout != null;
            }
        }

        private const float POLL_DELAY_SECONDS = 0.5f;
        private CartLineItems _LineItems;
        private List<UserError> _UserErrors = null;
        private List<String> DeletedLineItems = new List<string>();
        private ShopifyClient Client;
        private Checkout CurrentCheckout = null;

        private IWebCheckout WebCheckout;
        private INativeCheckout NativeCheckout;

        /// <summary>
        /// Constructs a new cart using a <see ref="ShopifyClient">ShopifyClient </see>. Typically, carts won't be
        /// instantiated directly, but will rather be instatiated using <see ref="ShopifyClient.Cart">ShopifyBuy.Client().Cart() </see>.
        /// </summary>
        /// <param name="client">client associated with this cart</param>
        /// \code
        /// // Example that creates a cart using a ShopifyClient and checks how many line items it has
        /// // (spoiler: it has 0 line items since the cart was just created).
        /// ShopifyClient client = new ShopifyClient(accessToken, shopDomain);
        ///
        /// Cart cart = new Cart(client);
        ///
        /// Debug.Log(cart.LineItems.All().Count);
        /// \endcode
        public Cart(ShopifyClient client) {
            Client = client;
            _LineItems = new CartLineItems(OnDeleteLineItem);

            #if UNITY_IOS
            WebCheckout = new iOSWebCheckout();
            NativeCheckout = new iOSNativeCheckout(this);
            #endif
        }

        public delegate void GetWebCheckoutLinkSuccess(string url);
        public delegate void GetWebCheckoutLinkFailure(ShopifyError error);

        public void GetWebCheckoutLink(GetWebCheckoutLinkSuccess success, GetWebCheckoutLinkFailure failure) {
            CheckoutSave(error => {
                if (error != null) {
                    failure(error);
                    return;
                }

                success(CurrentCheckout.webUrl());
            });
        }

        public void CheckoutWithNativeWebView(CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            if (WebCheckout == null) {
                // TODO use custom exception
                throw new Exception("This platform does not support checkout with web pay");
            }

            GetWebCheckoutLink(url => {
                WebCheckout.Checkout(url, success, cancelled, failure);
            }, error => {
                failure(error);
            });
        }

        public void CheckoutWithNativePay(string key, CheckoutSuccessCallback success, CheckoutCancelCallback cancelled, CheckoutFailureCallback failure) {
            if (NativeCheckout == null) {
                // TODO use custom exception
                throw new Exception("This platform does not support checkout with native pay");
            }

            CheckoutSave(error => {
                if (error != null) {
                    failure(error);
                } else {
                    NativeCheckout.Checkout(key, success, cancelled, failure);
                }
            });
        }

        public void SetShippingLine(string shippingRateHandle, CompletionCallback callback) {
            MutationQuery query = new MutationQuery();

            DefaultQueries.checkout.ShippingLineUpdate(query, CurrentCheckout.id(), shippingRateHandle);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                if (UpdateState(response.checkoutShippingLineUpdate().checkout(), response.checkoutShippingLineUpdate().userErrors())) {
                    if (CurrentCheckout.ready()) {
                        callback(null);
                    } else {
                        PollCheckoutAndUpdate(PollCheckoutReady, callback);
                    }
                } else {
                    HandleUserError(callback);
                }
            });
        }

        public bool CanShowNativePaySetup() {
            if (NativeCheckout != null) {
               return  NativeCheckout.CanShowPaymentSetup();
            } else {
                return false;
            }
        }

        public void ShowNativePaySetup() {
            if (NativeCheckout != null) {
                NativeCheckout.ShowPaymentSetup();
            } else {
                // TODO throw an exception, this platform does not support showing a native payment setup
            }
        }

        public bool CanCheckoutWithNativePay() {
            if (NativeCheckout != null) {
                return NativeCheckout.CanCheckout();
            } else {
                return false;
            }
        }

        public void SetShippingAddressAndEmail(MailingAddressInput mailingAddressInput, string email, CompletionCallback callback) {
            MutationQuery query = new MutationQuery();

            DefaultQueries.checkout.EmailUpdate(query, CurrentCheckout.id(), email);
            DefaultQueries.checkout.ShippingAddressUpdate(query, CurrentCheckout.id(), mailingAddressInput);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                } else {
                    if (UpdateState(response.checkoutEmailUpdate().checkout(), response.checkoutEmailUpdate().userErrors())) {
                        if (CurrentCheckout.availableShippingRates().ready()) {
                            callback(null);
                        } else {
                            PollCheckoutAndUpdate(PollCheckoutAvailableShippingRatesReady, callback);
                        }
                    } else {
                        HandleUserError(callback);
                    }
                }
            });
        }

        private void CheckoutSave(CompletionCallback callback) {
            if (!IsCreated) {
                CheckoutCreate(callback);
            } else if(!IsSaved) {
                CheckoutUpdate(callback);
            } else {
                callback(null);
            }
        }

        private void CheckoutCreate(CompletionCallback callback) {
            MutationQuery query = new MutationQuery();

            List<CheckoutLineItemInput> newLineItemInput = CartLineItems.ConvertToCheckoutLineItemInput(LineItems.All());

            DefaultQueries.checkout.Create(query, newLineItemInput);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                if (UpdateState(response.checkoutCreate().checkout(), response.checkoutCreate().userErrors())) {
                    if (CurrentCheckout.ready()) {
                        callback(null);
                    } else {
                        PollCheckoutAndUpdate(PollCheckoutReady, callback);
                    }
                } else {
                    HandleUserError(callback);
                }
            });
        }

        private void CheckoutWithTokenizedPayment(TokenizedPaymentInput tokenizedPaymentInput, CompletionCallback callback) {
            Action<Payment> pollPayment = (payment) => {
                PollPaymentReady(payment.id(), (Payment newPayment, ShopifyError error) => {
                    if (error != null) {
                        callback(error);
                    } else {
                        if (UpdateState(payment.checkout())) {
                            callback(null);
                        } else {
                            HandleUserError(callback);
                        }
                    }
                });
            };

            Action checkoutWithTokenizedPayment = () => {
                MutationQuery query = new MutationQuery();
                DefaultQueries.checkout.CheckoutCompleteWithTokenizedPayment(query, CurrentCheckout.id(), tokenizedPaymentInput);

                Client.Mutation(query, (Mutation response, ShopifyError error) => {
                    if (error != null) {
                        callback(error);
                        return;
                    } else {
                        var responseNode = response.checkoutCompleteWithTokenizedPayment();
                        var payment = responseNode.payment();

                        if (UpdateState(responseNode.checkout(), responseNode.userErrors())) {
                            if (payment.ready()) {
                                callback(null);
                            } else {
                                pollPayment(payment);
                            }
                        } else {
                            HandleUserError(callback);
                        }
                    }
                });
            };

            // Ensure we can checkout first
            if (CurrentCheckout.ready()){
                checkoutWithTokenizedPayment();
            } else {
                PollCheckoutReady((Checkout checkout, ShopifyError error) => {
                    if (error != null) {
                        callback(error);
                    } else {
                        checkoutWithTokenizedPayment();
                    }
                });
            }
        }

        private void CheckoutUpdate(CompletionCallback callback) {
            MutationQuery query = new MutationQuery();

            // remove all line items them add them
            List<string> lineItemsToRemove = CartLineItems.ConvertToLineItemIds(LineItems.All());
            lineItemsToRemove.AddRange(DeletedLineItems);

            List<CheckoutLineItemInput> lineItemsToAdd = CartLineItems.ConvertToCheckoutLineItemInput(LineItems.All());

            DefaultQueries.checkout.LineItemsRemove(query, CurrentCheckout.id(), lineItemsToRemove);
            DefaultQueries.checkout.LineItemsAdd(query, CurrentCheckout.id(), lineItemsToAdd);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                DeletedLineItems.Clear();

                if (UpdateState(response.checkoutLineItemsAdd().checkout(), response.checkoutLineItemsAdd().userErrors())) {
                    if (CurrentCheckout.ready()) {
                        callback(null);
                    } else {
                        PollCheckoutAndUpdate(PollCheckoutReady, callback);
                    }
                } else {
                    HandleUserError(callback);
                }
            });
        }

        private bool UpdateState(Checkout checkout) {
            return UpdateState(checkout, new List<UserError>());
        }

        private bool UpdateState(Checkout checkout, List<UserError> userErrors) {
            if (CurrentCheckout == null) {
                CurrentCheckout = checkout;
            } else {
                MergeCheckout merger = new MergeCheckout();

                CurrentCheckout = merger.Merge(CurrentCheckout, checkout);
            }

            if (userErrors.Count > 0) {
                _UserErrors = userErrors;
            } else {
                _UserErrors = null;
            }

            UpdateLineItemFromCheckout(CurrentCheckout);

            return _UserErrors == null;
        }

        private void UpdateLineItemFromCheckout(Checkout checkout) {
            if (checkout == null) {
                return;
            }

            // sometimes we may not query line items for instance when polling is being performed
            try {
                List<CheckoutLineItem> lineItems = (List<CheckoutLineItem>) checkout.lineItems();

                LineItems.UpdateLineItemsFromCheckoutLineItems(lineItems);
            } catch(NoQueryException exception) {}
        }

        private void HandleUserError(CompletionCallback callback) {
            ShopifyError error = new ShopifyError(
                ShopifyError.ErrorType.UserError,
                "There were issues with some of the fields sent. See `cart.UserErrors`"
            );

            callback(error);
        }

        private void OnDeleteLineItem(string lineItemId) {
            DeletedLineItems.Add(lineItemId);
        }
    }
}
