namespace <%= namespace %> {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    /// <summary>
    /// This exception is thrown when interacting with a cart to add, update, or delete line items and no matching
    /// variant could be found.
    /// </summary>
    public class NoMatchingVariantException : Exception {
        public NoMatchingVariantException(string message) : base(message) {}
    }

    /// <summary>
    /// Manages line items for an order. Can also be used to generate a web checkout link to check out in browser.
    /// </summary>
    public class Cart {
        /// <summary>
        /// Current <see ref="CartLineItems">line items </see> for this <see ref="Cart">Cart </see>.
        /// </summary>
        public CartLineItems LineItems {
            get {
                return _LineItems;
            }
        }

        private bool IsSaved {
            get {
                return IsCreated && 
                    LineItems.New().Count == 0 &&
                    LineItems.Modified().Count == 0 &&
                    LineItems.Deleted().Count == 0;
            }
        }

        private bool IsCreated {
            get {
                return CheckoutId != null;
            }
        }

        private const float POLL_DELAY = 0.5f;
        private CartLineItems _LineItems;
        private ShopifyClient Client;
        private string CheckoutId = null;
        private string CheckoutWebUrl = null;
        private bool IsCheckoutReady = true;

        /// <summary>
        /// Constructs a new cart using a <see ref="ShopifyClient">ShopifyClient </see>. Typically, carts won't be
        /// instantiated directly, but will rather be instatiated using <see ref="ShopifyClient.Cart">ShopifyBuy.Client().Cart() </see>.
        /// </summary>
        /// <param name="client">client associated with this cart</param>
        /// \code
        /// // Example that creates a cart using a ShopifyClient and checks how many line items it has
        /// // (spoiler: it has 0 line items since the cart was just created).
        /// ShopifyClient client = new ShopifyClient(accessToken, shopDomain);
        ///
        /// Cart cart = new Cart(client);
        ///
        /// Debug.Log(cart.LineItems.All().Count);
        /// \endcode
        public Cart(ShopifyClient client) {
            Client = client;
            _LineItems = new CartLineItems();
        }

        public void GetWebCheckoutLink(Action<string> success, Action<List<string>, string> failure) {
            CheckoutSave((errors, httpError) => {
                if (errors != null || httpError != null) {
                    failure(errors, httpError);
                } else {
                    success(CheckoutWebUrl);
                }
            });
        }

        private void CheckoutSave(Action<List<string>, string> callback) {
            if (!IsCreated) {
                CheckoutCreate(callback);
            } else if(!IsSaved) {
                CheckoutUpdate(callback);
            } else {
                callback(null, null);
            }
        }

        private void CheckoutCreate(Action<List<string>, string> callback) {
            MutationQuery query = new MutationQuery();

            List<CheckoutLineItemInput> newLineItemInput = CartLineItems.ConvertToCheckoutLineItemInput(LineItems.New());

            DefaultQueries.checkout.Create(query, newLineItemInput);

            LineItems.ClearNew();

            Client.Mutation(query, (Mutation response, List<string> errors, string httpError) => {
                if (errors != null || httpError != null) {
                    callback(errors, httpError);
                } else {
                    UpdateCheckout(response.checkoutCreate().checkout());
                    
                    CheckoutPoll(callback);
                }
            });
        }

        private void CheckoutUpdate(Action<List<string>, string> callback) {
            MutationQuery query = new MutationQuery();
            bool doAdd = LineItems.New().Count > 0;
            bool doModify = LineItems.Modified().Count > 0;
            bool doDelete = LineItems.Deleted().Count > 0;

            if (doAdd) {
                DefaultQueries.checkout.LineItemsAdd(query, CheckoutId, CartLineItems.ConvertToCheckoutLineItemInput(LineItems.New()));
                LineItems.ClearNew();
            }

            if (doModify) {
                DefaultQueries.checkout.LineItemsUpdate(query, CheckoutId, CartLineItems.ConvertToCheckoutLineItemUpdateInput(LineItems.Modified()));
                LineItems.ClearModified();
            }

            if (doDelete) {
                DefaultQueries.checkout.LineItemsRemove(query, CheckoutId, CartLineItems.ConvertToCheckoutIds(LineItems.Deleted()));
                LineItems.ClearDeleted();
            }

            Client.Mutation(query, (Mutation response, List<string> errors, string httpError) => {
                if (errors != null || httpError != null) {
                    callback(errors, httpError);
                } else {
                    if (doAdd) {
                        UpdateCheckout(response.checkoutLineItemsAdd().checkout());
                    } else if (doModify) {
                        UpdateCheckout(response.checkoutLineItemsUpdate().checkout());
                    }

                    CheckoutPoll(callback);
                }
            });
        }

        private void UpdateCheckout(Checkout checkout) {
            CheckoutId = checkout.id();
            IsCheckoutReady = checkout.ready();
            CheckoutWebUrl = checkout.webUrl();

            // sometimes we may not query line items for instance when polling is being performed
            try {
                UpdateLineItemIdsFromCheckout(checkout);
            } catch(NoQueryException exception) {}
        }

        private void UpdateLineItemIdsFromCheckout(Checkout checkout) {
            List<CheckoutLineItem> lineItems = (List<CheckoutLineItem>) checkout.lineItems();
            List<CartLineItem> cartLineItems = LineItems.All();

            foreach(CheckoutLineItem lineItem in lineItems) {
                foreach(CartLineItem cartLineItem in cartLineItems) {
                    if (cartLineItem.VariantId == lineItem.variant().id()) {
                        cartLineItem.ID = lineItem.id();
                    }
                }
            }
        }

        private void CheckoutPoll(Action<List<string>, string> callback) {
            if (IsCheckoutReady) {
                callback(null, null);
            } else {
                QueryRootQuery query = new QueryRootQuery();

                DefaultQueries.checkout.Poll(query, CheckoutId);

                Client.Query(query, (QueryRoot response, List<string> errors, string httpError) => {
                    if (errors != null || httpError != null) {
                        callback(errors, httpError);
                    } else {
                        Checkout checkout = (Checkout) response.node();

                        UpdateCheckout(checkout);

                        if (IsCheckoutReady) {
                            callback(null, null);
                        } else {
                            #if !SHOPIFY_MONO_UNIT_TEST
                                UnityTimeout.Start(POLL_DELAY, () => {
                                    CheckoutPoll(callback);    
                                });
                            #else
                                CheckoutPoll(callback);
                            #endif
                        }
                    }
                });
            }
        }
    }
}
