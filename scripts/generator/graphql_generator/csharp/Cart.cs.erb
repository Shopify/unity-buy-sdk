namespace <%= namespace %> {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    /// <summary>
    /// This exception is thrown when interacting with a cart to add, update, or delete line items and no matching
    /// variant could be found.
    /// </summary>
    public class NoMatchingVariantException : Exception {
        public NoMatchingVariantException(string message) : base(message) {}
    }

    /// <summary>
    /// Manages line items for an order. Can also be used to generate a web checkout link to check out in browser.
    /// </summary>
    public class Cart {
        /// <summary>
        /// Current <see ref="CartLineItems">line items </see> for this <see ref="Cart">Cart </see>.
        /// </summary>
        public CartLineItems LineItems {
            get {
                return _LineItems;
            }
        }

        private CartLineItems _LineItems;

        private ShopifyClient Client;

        /// <summary>
        /// Constructs a new cart using a <see ref="ShopifyClient">ShopifyClient </see>. Typically, carts won't be
        /// instantiated directly, but will rather be instatiated using <see ref="ShopifyClient.Cart">ShopifyBuy.Client().Cart() </see>.
        /// </summary>
        /// <param name="client">client associated with this cart</param>
        /// \code
        /// // Example that creates a cart using a ShopifyClient and checks how many line items it has
        /// // (spoiler: it has 0 line items since the cart was just created).
        /// ShopifyClient client = new ShopifyClient(accessToken, shopDomain);
        ///
        /// Cart cart = new Cart(client);
        ///
        /// Debug.Log(cart.LineItems.All().Count);
        /// \endcode
        public Cart(ShopifyClient client) {
            Client = client;
            _LineItems = new CartLineItems();
        }

        /// <summary>
        /// Returns a link which can be used to check out this cart's line items via a web browser.
        /// </summary>
        /// <param name="note">can be used to create a special note for the merchant for this order</param>
        /// \code
        /// // Example that creates a checkout link and opens the url in the Browser
        /// string linkToCheckout = ShopifyBuy.Client().Cart().GetWebCheckoutLink();
        ///
        /// Application.OpenURL(linkToCheckout);
        /// \endcode
        public string GetWebCheckoutLink(string note = null) {
            StringBuilder url = new StringBuilder();
            bool hasLineItem = false;

            url.Append("http://");
            url.Append(Client.Domain);
            url.Append("/cart/");

            foreach(CartLineItem lineItem in LineItems.All()) {
                if (hasLineItem) {
                    url.Append(",");
                }

                hasLineItem = true;

                string variantId = System.Text.Encoding.UTF8.GetString(
                    Convert.FromBase64String(lineItem.VariantId)
                );

                // convert from variant gid to variant id
                string[] variandIdSplit = variantId.Split('/');

                url.Append(variandIdSplit[variandIdSplit.Length - 1]);
                url.Append(":");
                url.Append(lineItem.Quantity);
            }

            url.Append("?access_token=");
            url.Append(Client.AccessToken);

            if (note != null) {
                url.Append("&note=");
                url.Append(note);
            }

            return url.ToString();
        }
    }
}
