namespace <%= namespace %> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    public partial class Cart {
        private delegate void CheckoutPoll(CheckoutPollFinishedHandler callback);
        private delegate void CheckoutPollFinishedHandler(Checkout checkout, ShopifyError error);
        private delegate void PaymentPollFinishedHandler(Payment payment, ShopifyError error);

        // Polls a Checkout node, till isReady returns True.
        private void PollCheckoutNode(PollUpdatedHandler isReady, CheckoutPollFinishedHandler callback) {
            QueryRootQuery query = new QueryRootQuery();
            DefaultQueries.checkout.Poll(query, CurrentCheckout.id());

            Client.PollQuery(isReady, query, (response, error) => {

                if (error != null) {
                    callback(null, error);
                } else {
                    Checkout checkout = (Checkout) response.node();
                    callback(checkout, null);
                }
            });
        }

        // Polls a Payment node, till isReady returns True.
        private void PollPaymentNode(string paymentId, PollUpdatedHandler isReady, PaymentPollFinishedHandler callback) {
            QueryRootQuery query = new QueryRootQuery();
            DefaultQueries.checkout.PaymentPoll(query, paymentId);

            Client.PollQuery(isReady, query, (response, error) => {
                if (error != null) {
                    callback(null, error);
                } else {
                    Payment payment = (Payment)response.node();
                    callback(payment, null);
                }
            });
        }

        // Convenience method to poll a Checkout node till its ready property is True
        private void PollCheckoutReady(CheckoutPollFinishedHandler callback) {

            PollUpdatedHandler isReady = (updatedQueryRoot) => {
                var checkout = (Checkout)updatedQueryRoot.node();
                return checkout.ready();
            };

            PollCheckoutNode(isReady, callback);
        }

        // Convenience method to poll a Checkout node till its available shipping rates' ready property is True
        private void PollCheckoutAvailableShippingRatesReady(CheckoutPollFinishedHandler callback) {
            PollUpdatedHandler isReady = (updatedQueryRoot) => {
                var checkout = (Checkout)updatedQueryRoot.node();
                return checkout.availableShippingRates().ready();
            };

            PollCheckoutNode(isReady, callback);
        }

        // Convenience method to perform some polling on Checkout and update the Current Checkout when completed
        private void PollCheckoutAndUpdate(CheckoutPoll poll, CompletionCallback callback) {
            poll((Checkout checkout, ShopifyError error) => {
                if (error == null && checkout != null) {
                    UpdateState(checkout);
                }
                callback(error);
            });
        }

        // Convenience method to poll a Payment node with paymentId till its ready property is True
        private void PollPaymentReady(string paymentId, PaymentPollFinishedHandler callback) {
            PollUpdatedHandler isReady = (updatedQueryRoot) => {
                var payment = (Payment)updatedQueryRoot.node();
                return payment.ready();
            };

            PollPaymentNode(paymentId, isReady, callback);
        }
    }
}
