namespace <%= namespace %> {
    using System;
    using System.Collections.Generic;
    using <%= namespace %>.SDK;
    using <%= namespace %>.GraphQL;

    public partial class Cart {
        /// <summary>
        /// Retrieve the shipping total for the current checkout.
        /// </summary>
        /// <exception cref="NoCheckoutException">Calling this accessor before a checkout was created for the Cart. See Cart.GetWebCheckoutLink</exception>
        /// <exception cref="NoQueryException">Calling this accessor before a shipping line was set. See Cart.SetShippingLine</exception>
        public decimal GetShippingTotal() {
            try { 
                if (CurrentCheckout == null) {
                    throw new NoCheckoutException("There is no Checkout created from this Cart. See Cart.GetWebCheckoutLink");
                } else {
                    return CurrentCheckout.shippingLine().price();
                }
            } catch (NoQueryException ex) {
                throw new NoQueryException("Attempted to retrieve shipping total when a shipping line was not set. See Cart.SetShippingLine", ex);
            }
        }

        /// <summary>
        /// Retrieve the total tax for the current checkout.
        /// </summary>
        /// <exception cref="NoCheckoutException">Calling this accessor before a checkout was created for the Cart. See Cart.GetWebCheckoutLink</exception>
        public decimal GetTotalTax() {
            if (CurrentCheckout == null) {
                throw new NoCheckoutException("There is no Checkout created from this Cart. See Cart.GetWebCheckoutLink");
            } else {
                return CurrentCheckout.totalTax();
            }
        }

        /// <summary>
        /// Retrieve the price of the current checkout before shipping and taxes.
        /// </summary>
        /// <exception cref="NoCheckoutException">Calling this accessor before a checkout was created for the Cart. See Cart.GetWebCheckoutLink</exception>
        public decimal GetSubtotal() {
            if (CurrentCheckout == null) {
                throw new NoCheckoutException("There is no Checkout created from this Cart. See Cart.GetWebCheckoutLink");
            } else {
                return CurrentCheckout.subtotalPrice();
            }
        }


        /// <summary>
        /// Retrieve the total price of the current checkout.
        /// </summary>
        /// <exception cref="NoCheckoutException">Calling this accessor before a checkout was created for the Cart. See Cart.GetWebCheckoutLink</exception>
        public decimal GetTotal() {
            if (CurrentCheckout == null) {
                throw new NoCheckoutException("There is no Checkout created from this Cart. See Cart.GetWebCheckoutLink");
            } else {
                return CurrentCheckout.totalPrice();
            }
        }

        /// <summary>
        /// Retrieve the available shipping rates for the current checkout based on the set shipping address.
        /// </summary>
        /// <exception cref="NoCheckoutException">Calling this accessor before a checkout was created for the Cart. See Cart.GetWebCheckoutLink</exception>
        /// <exception cref="NoQueryException">Calling this accessor before a shipping address and email was set. See Cart.SetShippingAddressAndEmail</exception>
        /// <exception cref="NoQueryException">Calling this accessor when a checkout does not require shipping. See Cart.GetRequiresShipping</exception>
        public List<ShippingRate> GetShippingRates() {
            try {
                if (CurrentCheckout == null) {
                    throw new NoCheckoutException("There is no Checkout created from this Cart. See Cart.GetWebCheckoutLink");
                } else {
                    return CurrentCheckout.availableShippingRates().shippingRates();
                }
            } catch (NoQueryException ex){
                if (CurrentCheckout.requiresShipping()) {
                    throw new NoQueryException("Attempted to retrieve shipping rates when a shipping address and email were not set. See Cart.SetShippingAddressAndEmail", ex);
                } else {
                    throw new NoQueryException("Attempted to retrieve shipping rates when shipping is not required. See Cart.GetRequiresShipping", ex);
                }
            }
        }

        /// <summary>
        /// Retrieve whether or not the fulfillment requires shipping.
        /// </summary>
        /// <exception cref="NoCheckoutException">Calling this accessor before a checkout was created for the Cart. See Cart.GetWebCheckoutLink</exception>
        public bool GetRequiresShipping() {
            if (CurrentCheckout == null) {
                throw new NoCheckoutException("There is no Checkout created from this Cart. See Cart.GetWebCheckoutLink");
            } else {
                return CurrentCheckout.requiresShipping();
            }
        }
    }
}
